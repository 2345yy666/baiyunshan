"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var props_1 = require("./props");
var dayjs_1 = tslib_1.__importDefault(require("dayjs"));
var form_1 = tslib_1.__importDefault(require("../mixins/form"));
var fast_deep_equal_1 = tslib_1.__importDefault(require("fast-deep-equal"));
var util_1 = require("./util");
var fmtEvent_1 = tslib_1.__importDefault(require("../_util/fmtEvent"));
Component({
    mixins: [(0, form_1.default)({ trigger: 'onOk' })],
    props: props_1.DatePickerDefaultProps,
    data: function () {
        return {
            currentValue: [],
            columns: [],
            cValue: null,
            forceUpdate: 0, // 强制更新picker组件，已知需处理的情况：value超限，但是需要更新format，由于picker的参数均未变化，无法触发picker的渲染
        };
    },
    didMount: function () {
        this._visible = false;
        var cValue = this.getValidPropValue();
        this.setData({
            cValue: cValue,
        });
    },
    didUpdate: function (prevProps) {
        if (!(0, util_1.isEqualDate)(prevProps.value, this.props.value)) {
            var cValue = this.getValidPropValue();
            this.setData({
                cValue: cValue,
                forceUpdate: this.data.forceUpdate + 1,
            });
            // 展开状态才更新picker的数据，否则下次triggerVisible触发
            if (this._visible) {
                this.setCurrentValue();
            }
        }
    },
    methods: {
        // 当前选中的picker值，处理无cValue时的情况，优先取当前时间，不在时间范围内取开始时间
        getCurrentValueWithCValue: function () {
            var cValue = this.data.cValue;
            var _a = this.props, min = _a.min, max = _a.max, precision = _a.precision;
            if (cValue) {
                return (0, util_1.getValueByDate)(cValue, precision);
            }
            else {
                var now = new Date();
                if (!(min && (0, dayjs_1.default)(now).isBefore((0, dayjs_1.default)(min))) &&
                    !(max && (0, dayjs_1.default)(now).isAfter((0, dayjs_1.default)(max)))) {
                    return (0, util_1.getValueByDate)(now, precision);
                }
                else {
                    return (0, util_1.getValueByDate)(this.getMin().toDate(), precision);
                }
            }
        },
        // 判断value是否有效
        getValidPropValue: function () {
            var _a = this.props, min = _a.min, max = _a.max, value = _a.value;
            var cValue = null;
            if (value instanceof Date &&
                (!min || value >= min) &&
                (!max || value <= max)) {
                cValue = value;
            }
            return cValue;
        },
        getMin: function () {
            var min = this.props.min;
            //@ts-ignore
            return min ? (0, dayjs_1.default)(min) : (0, dayjs_1.default)().subtract(10, 'year');
        },
        getMax: function () {
            var max = this.props.max;
            //@ts-ignore
            return max ? (0, dayjs_1.default)(max) : (0, dayjs_1.default)().add(10, 'year');
        },
        /**
         * didUpdate、弹窗打开触发
         */
        setCurrentValue: function () {
            var _this = this;
            var currentValue = this.getCurrentValueWithCValue();
            var newColumns = this.generateData(currentValue);
            if (!(0, fast_deep_equal_1.default)(newColumns, this.data.columns)) {
                this.setData({
                    columns: newColumns,
                }, function () {
                    _this.setData({
                        currentValue: currentValue,
                    });
                });
            }
            else {
                this.setData({
                    currentValue: currentValue,
                });
            }
        },
        // 生成选项数据，didmound、picker change、打开弹窗触发
        generateData: function (currentValue) {
            var precision = this.props.precision;
            var min = this.getMin();
            var max = this.getMax();
            if (max < min) {
                return [];
            }
            var currentPickerDay = (0, dayjs_1.default)();
            if (currentValue.length > 0) {
                currentPickerDay = (0, dayjs_1.default)((0, util_1.getDateByValue)(currentValue));
            }
            if (currentPickerDay < min || currentPickerDay > max) {
                currentPickerDay = min;
            }
            var newColumns = (0, util_1.getRangeData)(precision, min, max, currentPickerDay);
            return newColumns;
        },
        onChange: function (selectedIndex) {
            var _this = this;
            selectedIndex = (0, util_1.getValidValue)(selectedIndex);
            var _a = this.props, onPickerChange = _a.onPickerChange, format = _a.format, precision = _a.precision;
            var date = (0, util_1.getDateByValue)(selectedIndex);
            var min = this.getMin();
            var max = this.getMax();
            if ((0, dayjs_1.default)(date).isBefore(min)) {
                date = min.toDate();
                selectedIndex = (0, util_1.getValueByDate)(date, precision);
            }
            if ((0, dayjs_1.default)(date).isAfter(max)) {
                date = max.toDate();
                selectedIndex = (0, util_1.getValueByDate)(date, precision);
            }
            var newColumns = this.generateData(selectedIndex);
            if (!(0, fast_deep_equal_1.default)(newColumns, this.data.columns)) {
                this.setData({
                    columns: newColumns,
                }, function () {
                    _this.setData({ currentValue: selectedIndex });
                    if (onPickerChange) {
                        var date_1 = (0, util_1.getDateByValue)(selectedIndex);
                        onPickerChange(date_1, (0, dayjs_1.default)(date_1).format(format), selectedIndex, (0, fmtEvent_1.default)(_this.props));
                    }
                });
            }
            else {
                this.setData({ currentValue: selectedIndex });
                if (onPickerChange) {
                    var date_2 = (0, util_1.getDateByValue)(selectedIndex);
                    onPickerChange(date_2, (0, dayjs_1.default)(date_2).format(format), selectedIndex, (0, fmtEvent_1.default)(this.props));
                }
            }
        },
        onDismiss: function (e) {
            var onDismiss = this.props.onDismiss;
            if (onDismiss) {
                onDismiss((0, fmtEvent_1.default)(this.props, e));
            }
        },
        onOk: function () {
            var currentValue = this.data.currentValue;
            var format = this.props.format;
            var date = (0, util_1.getDateByValue)(currentValue);
            this.setData({ cValue: date });
            if (this.props.onOk) {
                this.props.onOk(date, (0, dayjs_1.default)(date).format(format), currentValue, (0, fmtEvent_1.default)(this.props));
            }
        },
        onFormat: function (values) {
            var _a = this.props, onFormat = _a.onFormat, format = _a.format, value = _a.value;
            var cValue = this.data.cValue;
            var realValue = cValue || value;
            return onFormat.call(this, realValue, realValue ? (0, dayjs_1.default)(realValue).format(format) : null, values);
        },
        onTriggerPicker: function (visible) {
            this._visible = visible;
            var onTriggerPicker = this.props.onTriggerPicker;
            if (visible) {
                this.setCurrentValue();
            }
            if (onTriggerPicker) {
                onTriggerPicker(visible, (0, fmtEvent_1.default)(this.props));
            }
        },
    },
});