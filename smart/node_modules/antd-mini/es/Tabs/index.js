"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/* eslint-disable @typescript-eslint/no-explicit-any */
var props_1 = require("./props");
var console_1 = require("../_util/console");
var tools_1 = require("../_util/tools");
var compareVersion_1 = require("../_util/compareVersion");
var tabsStore_1 = require("../_util/tabsStore");
var fmtEvent_1 = tslib_1.__importDefault(require("../_util/fmtEvent"));
var canSwipeable = my.canIUse('swiper.disable-touch');
var component2 = my.canIUse('component2');
var isShouldNotCalHeight = component2 && (0, compareVersion_1.compareVersion)(my.SDKVersion, '2.6.4') >= 0;
var isForceUpdate = (0, compareVersion_1.compareVersion)(my.SDKVersion, '2.6.4') >= 0 && (0, compareVersion_1.compareVersion)(my.SDKVersion, '2.7.5') === -1;
var isMoreThan275 = (0, compareVersion_1.compareVersion)(my.SDKVersion, '2.7.5') >= 0;
var isBaseSwiper = (0, compareVersion_1.compareVersion)(my.SDKVersion, '2.0.0') >= 0;
Component({
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    props: props_1.TabsDefaultProps,
    data: {
        _tabs: {},
        _leftFade: true,
        _rightFade: true,
        _tabsViewportWidth: 0,
        _scrollLeft: 0,
        _swipeable: false,
        _swipeableIndex: 0,
        _swipeableAnimation: false,
        _tabContentHeight: 0,
        currentIndex: 0,
        component2: component2,
        isBaseSwiper: isBaseSwiper,
        _forceRefreshSwiper: 0,
        _isForceUpdate: isForceUpdate,
    },
    didMount: function () {
        var _this = this;
        var setGroupDataVal = function () {
            var key = "".concat(_this.$page.$id, "-").concat(_this.props.uid);
            var group = tabsStore_1.tabsStore.getGroup(key);
            if (group) {
                var items = (0, tools_1.objectValues)(group.items).reduce(function (prev, cur) {
                    if (cur)
                        prev.push(cur.getTabsItemVal());
                    return prev;
                }, []);
                _this.setData({
                    _tabs: items
                });
            }
        };
        var key = "".concat(this.$page.$id, "-").concat(this.props.uid);
        tabsStore_1.tabsStore.setGroupDataVal(key, function () { return setTimeout(setGroupDataVal, 50); });
        setGroupDataVal();
        this.updateTabsItemFallbackVal(this.props.fallback);
        var _a = this.props, index = _a.index, animation = _a.animation;
        this.setData({
            currentIndex: index,
        });
        this._getTabsWidth();
        this._useSwipeable(this.props.swipeable);
        if (typeof index !== 'number') {
            // 如果当前索引值的类型不对给警告提示
            console_1.log.error('Tabs', "\u5F53\u524D\u6FC0\u6D3B\u7684\u7D22\u5F15\u503C\u7C7B\u578B\u975E number \u7C7B\u578B\uFF0C\u4FEE\u6539\u5F53\u524D index \u7684 ".concat(typeof index, " \u7C7B\u578B\uFF0C\u4EE5\u4FDD\u8BC1\u5C55\u793A\u7684\u6B63\u786E\u6027\u3002"));
        }
        else {
            my.createSelectorQuery()
                .select("#amd-tabs-bar-item-".concat(index))
                .boundingClientRect()
                .exec(function (ret) {
                if (!ret || !ret[0]) {
                    // 当获取到的索引值无法匹配时显示错误提示
                    console_1.log.error('Tabs', "\u6FC0\u6D3B\u7684\u7D22\u5F15\u503C\u9519\u8BEF\uFF0C\u8BF7\u786E\u8BA4 ".concat(index, " \u662F\u5426\u4E3A\u6B63\u786E\u7684\u7D22\u5F15\u503C\u3002"));
                    return;
                }
                var _tabsViewportWidth = _this.data._tabsViewportWidth;
                // 正确的索引值在初次加载时高亮展示当前 tab
                // eslint-disable-next-line no-lonely-if
                if (ret[0].left > _tabsViewportWidth / 2) {
                    _this.setData({
                        _scrollLeft: ret[0].left -
                            _tabsViewportWidth / 2 +
                            ret[0].width / 2,
                        _leftFade: true,
                        _swipeableAnimation: animation,
                    });
                }
                else {
                    _this.setData({
                        _scrollLeft: 0,
                        _leftFade: false,
                        _swipeableAnimation: animation,
                    });
                }
            });
            this._autoHeight(index);
        }
        if (!component2) {
            this.props.onGetRef(this.getRef());
        }
    },
    didUpdate: function (prevProps, prevData) {
        var _this = this;
        var _a = this.props, index = _a.index, animation = _a.animation, fallback = _a.fallback;
        if (prevProps.fallback !== fallback) {
            this.updateTabsItemFallbackVal(fallback);
        }
        if (prevProps.index !== index && prevData.currentIndex === this.data.currentIndex) {
            this._getTabsWidth();
            my.createSelectorQuery()
                .select("#amd-tabs-bar-item-".concat(index))
                .boundingClientRect()
                .exec(function (ret) {
                if (!ret || !ret[0]) {
                    // 当获取到的索引值无法匹配时显示错误提示
                    console_1.log.error('Tabs', "\u6FC0\u6D3B\u7684\u7D22\u5F15\u503C\u9519\u8BEF\uFF0C\u8BF7\u786E\u8BA4 ".concat(index, " \u662F\u5426\u4E3A\u6B63\u786E\u7684\u7D22\u5F15\u503C\u3002"));
                    return;
                }
                var _tabsViewportWidth = _this.data._tabsViewportWidth;
                _tabsViewportWidth = Math.floor(_tabsViewportWidth);
                var left = Math.floor(ret[0].left) + _this.data._scrollLeft;
                var width = Math.floor(ret[0].width);
                // 正确的索引值在初次加载时高亮展示当前 tab
                if (_this.changeTap) {
                    left = _this.currentLeft;
                    _this.changeTap = false;
                }
                if (left > _tabsViewportWidth / 2) {
                    _this.setData({
                        _scrollLeft: left - _tabsViewportWidth / 2 + width / 2,
                        _leftFade: true,
                        currentIndex: index,
                        _swipeableAnimation: animation,
                    });
                }
                else {
                    _this.setData({
                        _scrollLeft: 0,
                        _leftFade: false,
                        currentIndex: index,
                        _swipeableAnimation: animation,
                    });
                }
            });
            this._autoHeight(index);
        }
        this._useSwipeable(this.props.swipeable);
    },
    didUnmount: function () {
        var key = "".concat(this.$page.$id, "-").concat(this.props.uid);
        tabsStore_1.tabsStore.removeGroup(key);
    },
    methods: {
        updateTabsItemFallbackVal: function (v) {
            var key = "".concat(this.$page.$id, "-").concat(this.props.uid);
            var group = tabsStore_1.tabsStore.getGroup(key);
            if (group) {
                (0, tools_1.objectValues)(group.items).forEach(function (item) {
                    // @ts-ignore
                    item.setFallback(v);
                });
            }
        },
        _autoHeight: function (tabIndex) {
            var _this = this;
            if (isShouldNotCalHeight)
                return;
            if (this.props.fallback)
                return;
            // tabItem 自适应高度的处理
            // 获取每个 item-pane 的高度，通过传入当前 tab 的 index 值
            // 动态修改 _tabContentHeight 后在 axml 中插入修改
            my.createSelectorQuery()
                .selectAll("#amd-tabs-content-".concat(this.$id, " .amd-tabs-item-pane"))
                .boundingClientRect()
                .exec(function (ret) {
                var _a;
                if (ret && ret[0]) {
                    _this.setData({
                        _tabContentHeight: (_a = ret[0][tabIndex]) === null || _a === void 0 ? void 0 : _a.height,
                    });
                }
            });
        },
        handleSwiperChange: function (e) {
            var _a, _b, _c, _d;
            var onChange = this.props.onChange;
            // tab-item 滑动时获取当前的 item 元素
            // 并修改 swiper 的高度以自适应展示
            this.setData({
                currentIndex: (_a = e.detail) === null || _a === void 0 ? void 0 : _a.current,
                _swipeableIndex: (_b = e.detail) === null || _b === void 0 ? void 0 : _b.current,
                _swipeableAnimation: true,
            });
            this._autoHeight((_c = e.detail) === null || _c === void 0 ? void 0 : _c.current);
            if (onChange) {
                return onChange((_d = e.detail) === null || _d === void 0 ? void 0 : _d.current, (0, fmtEvent_1.default)(this.props, e));
            }
        },
        _useSwipeable: function (b) {
            var swipeable = this.props.swipeable;
            if (!component2 && swipeable && !b) {
                console_1.log.error('Tabs', '未开启 component2 编译，swipeable 无法使用');
            }
            // 如需使用 swipeable 属性，需要基础库版本 ≥ 1.15.0
            if (!canSwipeable) {
                this.setData({
                    _swipeable: true,
                });
                if (!b) {
                    console_1.log.error('Tabs', '基础库版本需要 1.15.0 及以上才可以使用 swipeable');
                }
            }
            else {
                this.setData({
                    _swipeable: !this.props.swipeable,
                });
            }
        },
        _getTabsWidth: function () {
            var _this = this;
            // 获取 tabs 可视区域的宽度
            my.createSelectorQuery()
                .select("#amd-tabs-bar-scroll-view-".concat(this.$id))
                .boundingClientRect()
                .exec(function (ret) {
                if (ret && ret[0]) {
                    _this.setData({
                        _tabsViewportWidth: ret[0].width,
                    });
                }
            });
        },
        onChange: function (e) {
            var _a, _b, _c, _d;
            var onChange = this.props.onChange;
            var index = parseInt((_b = (_a = e === null || e === void 0 ? void 0 : e.currentTarget) === null || _a === void 0 ? void 0 : _a.dataset) === null || _b === void 0 ? void 0 : _b.index, 10);
            if ((_c = this.data._tabs[index]) === null || _c === void 0 ? void 0 : _c.disabled) {
                return;
            }
            if (onChange && index !== this.data.currentIndex) {
                this.changeTap = true;
                // 获取当前元素的 offsetLeft 值
                this.currentLeft = (_d = e === null || e === void 0 ? void 0 : e.currentTarget) === null || _d === void 0 ? void 0 : _d.offsetLeft;
                return onChange(index, (0, fmtEvent_1.default)(this.props, e));
            }
        },
        handleSwiperTouchStart: function (e) {
            var onTouchStart = this.props.onTouchStart;
            if (typeof onTouchStart === "function") {
                onTouchStart(e);
            }
        },
        handleSwiperTransition: function (e) {
            var onTransition = this.props.onTransition;
            if (typeof onTransition === "function") {
                onTransition(e);
            }
        },
        handleAnimationEnd: function (e) {
            var onAnimationEnd = this.props.onAnimationEnd;
            if (typeof onAnimationEnd === "function") {
                onAnimationEnd(e);
            }
        },
        appearLeft: function () {
            this.setData({
                _leftFade: false,
            });
        },
        disappearLeft: function () {
            this.setData({
                _leftFade: true,
            });
        },
        appearRight: function () {
            this.setData({
                _rightFade: false,
            });
        },
        disappearRight: function () {
            this.setData({
                _rightFade: true,
            });
        },
        getRef: function () {
            var _this = this;
            return {
                getCompInstance: function () { return _this; },
                updateHeight: function (idx) { return _this._autoHeight(idx); },
            };
        },
    },
    ref: function () {
        var _this = this;
        var updateHeight = isForceUpdate
            ? function () { return _this.setData({ _forceRefreshSwiper: Math.random() }); }
            : function (idx) { return _this._autoHeight(idx); };
        return isMoreThan275 ?
            { getCompInstance: function () { return _this; } }
            :
                {
                    getCompInstance: function () { return _this; },
                    updateHeight: updateHeight,
                };
    },
});