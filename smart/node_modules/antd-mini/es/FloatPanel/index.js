"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var props_1 = require("./props");
Component({
    props: props_1.FLoatingPanelDefaultProps,
    data: {
        sys: null,
        height: 0,
        scrollViewHeight: 0,
        // 面板最大高度
        maxHeight: 0,
        // 面板中间高度
        middleHeight: 0,
        // 面板最小高度
        minHeight: 0,
        // scroll-view 是否可以滚动
        scrollY: false,
        arrow: 'UP',
        arrowHeight: 24,
        mounted: false,
        id: null,
    },
    didMount: function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var sys, sys_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.setData({ mounted: true });
                        sys = this.props.systemInfo;
                        if (!!sys) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getSystemInfo()];
                    case 1:
                        sys_1 = _a.sent();
                        this.setData({ sys: sys_1 });
                        _a.label = 2;
                    case 2:
                        this.calculateHeight(sys);
                        return [2 /*return*/];
                }
            });
        });
    },
    methods: {
        // 方便sjs调试打印
        console: function () {
            var arg = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                arg[_i] = arguments[_i];
            }
            console.log.apply(console, tslib_1.__spreadArray(['console'], arg, false));
        },
        calculateHeight: function (sys) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _a, headerHeight, footerHeight, listHeight, contentHeight, _b, windowHeight, maxHeight, middleHeight, minHeight, scrollViewHeight;
                return tslib_1.__generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            sys = sys || this.data.sys || {};
                            return [4 /*yield*/, Promise.all([
                                    this.getWrapperHeight('.amd-floatpanel-header'),
                                    this.getWrapperHeight('.amd-floatpanel-footer'),
                                    this.getWrapperHeight('.amd-floatpanel-scroll-view-content'),
                                ])];
                        case 1:
                            _a = _c.sent(), headerHeight = _a[0], footerHeight = _a[1], listHeight = _a[2];
                            contentHeight = headerHeight + listHeight + footerHeight;
                            _b = sys.windowHeight, windowHeight = _b === void 0 ? 375 : _b;
                            maxHeight = windowHeight * (this.props.maxHeight || 0.95);
                            // 当内容高度小于 0.95 视窗大小时，缩短面板最大高度
                            maxHeight = contentHeight < maxHeight ? contentHeight : maxHeight;
                            middleHeight = windowHeight * (this.props.middleHeight || 0.35);
                            middleHeight =
                                contentHeight < middleHeight ? contentHeight : middleHeight;
                            minHeight = windowHeight * (this.props.minHeight || 0.18);
                            minHeight = contentHeight < minHeight ? contentHeight : minHeight;
                            scrollViewHeight = maxHeight - headerHeight - footerHeight;
                            this.setData({
                                minHeight: minHeight,
                                maxHeight: maxHeight,
                                middleHeight: middleHeight,
                                scrollViewHeight: scrollViewHeight,
                                height: minHeight,
                            });
                            return [2 /*return*/];
                    }
                });
            });
        },
        getWrapperHeight: function (classname) {
            return new Promise(function (resolve) {
                my.createSelectorQuery()
                    .select(classname)
                    .boundingClientRect()
                    .exec(function (ret) {
                    var _a;
                    var height = ((_a = ret[0]) === null || _a === void 0 ? void 0 : _a.height) || 0;
                    resolve(height);
                });
            });
        },
        getSystemInfo: function () {
            return new Promise(function (resolve) {
                my.getSystemInfo({
                    success: function (res) {
                        resolve(res);
                    },
                    fail: function () {
                        resolve({});
                    },
                });
            });
        },
        disableScrollY: function () {
            this.setData({ scrollY: false });
        },
        enableScrollY: function () {
            this.setData({ scrollY: true });
        },
        changeArrow: function (type) {
            this.setData({
                arrow: type,
                arrowHeight: type === 'MIDDLE' ? 8 : 24,
            });
        },
        onScrollViewToBottom: function () {
            var _a, _b;
            (_b = (_a = this.props).onContentToBottom) === null || _b === void 0 ? void 0 : _b.call(_a);
        },
        scrollStatus: function (pos) {
            var _a, _b;
            (_b = (_a = this.props).onScroll) === null || _b === void 0 ? void 0 : _b.call(_a, pos);
        },
    },
});