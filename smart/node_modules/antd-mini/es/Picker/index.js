"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fast_deep_equal_1 = tslib_1.__importDefault(require("fast-deep-equal"));
var props_1 = require("./props");
var controlled_1 = tslib_1.__importDefault(require("../mixins/controlled"));
var form_1 = tslib_1.__importDefault(require("../mixins/form"));
var utils_1 = require("./utils");
var fmtEvent_1 = tslib_1.__importDefault(require("../_util/fmtEvent"));
Component({
    mixins: [(0, controlled_1.default)(), (0, form_1.default)({ trigger: 'onOk' })],
    props: props_1.PickerDefaultProps,
    data: {
        formatValue: '',
        columns: [],
        visible: false,
    },
    tempSelectedIndex: null,
    single: false,
    isChangingPickerView: false,
    didMount: function () {
        var _this = this;
        var columns = this.getterColumns();
        this.setData({
            columns: columns
        }, function () {
            var formatValue = _this.getterFormatText();
            var selectedIndex = _this.getterSelectedIndex();
            _this.setData({
                formatValue: formatValue,
                selectedIndex: selectedIndex
            });
        });
    },
    didUpdate: function (prevProps, prevData) {
        var _this = this;
        var cValue = this.data.cValue;
        var prevCValue = prevData.cValue;
        if (!(0, fast_deep_equal_1.default)(prevProps.data, this.props.data)) {
            var newColums = this.getterColumns();
            this.setData({
                columns: newColums
            }, function () {
                // 如果是在滚动过程中columns发生变化，以onChange里抛出的selectedIndex为准
                if (!_this.isChangingPickerView) {
                    _this.tempSelectedIndex = null;
                    var selectedIndex = _this.getterSelectedIndex();
                    _this.setData({
                        selectedIndex: selectedIndex
                    });
                }
                _this.isChangingPickerView = false;
            });
        }
        if (!(0, fast_deep_equal_1.default)(cValue, prevCValue)) {
            var selectedIndex = this.getterSelectedIndex();
            this.tempSelectedIndex = null;
            this.setData({
                selectedIndex: selectedIndex,
            });
        }
        var formatValue = this.getterFormatText();
        if (formatValue !== this.data.formatValue) {
            this.setData({
                formatValue: formatValue
            });
        }
    },
    methods: {
        getterColumns: function () {
            var columns = [];
            if (this.props.data.length > 0) {
                if (this.props.data.every(function (item) { return item instanceof Array; })) {
                    this.single = false;
                    columns = this.props.data.slice();
                }
                else {
                    this.single = true;
                    columns = [this.props.data];
                }
            }
            return columns;
        },
        getterFormatText: function () {
            var onFormat = this.props.onFormat;
            var _a = this.data, cValue = _a.cValue, columns = _a.columns;
            var formatValue = '';
            var matchedColumn = (0, utils_1.getStrictMatchedItemByValue)(columns, cValue, this.single).matchedColumn;
            formatValue = onFormat(cValue, matchedColumn, this.props.data);
            return formatValue;
        },
        getterSelectedIndex: function () {
            var selectedIndex = [];
            var columns = this.data.columns;
            var cValue = this.data.cValue;
            var value = cValue;
            if (this.single) {
                value = [cValue];
            }
            var _loop_1 = function (i) {
                var column = columns[i];
                var compareValue = value[i];
                if (compareValue === undefined || compareValue === null) {
                    selectedIndex[i] = 0;
                }
                var index = column.findIndex(function (c) {
                    return c === compareValue || c.value === compareValue;
                });
                if (index === -1) {
                    index = 0;
                }
                selectedIndex[i] = index;
            };
            for (var i = 0; i < columns.length; i++) {
                _loop_1(i);
            }
            return selectedIndex;
        },
        onOpen: function () {
            var disabled = this.props.disabled;
            if (!disabled) {
                this.tempSelectedIndex = null;
                this.setData({
                    visible: true,
                });
                this.triggerPicker(true);
            }
        },
        triggerPicker: function (visible) {
            var onTriggerPicker = this.props.onTriggerPicker;
            if (onTriggerPicker) {
                onTriggerPicker(visible, (0, fmtEvent_1.default)(this.props));
            }
        },
        onMaskDismiss: function () {
            var onDismiss = this.props.onDismiss;
            this.setData({
                visible: false,
            });
            this.triggerPicker(false);
            if (onDismiss) {
                return onDismiss((0, fmtEvent_1.default)(this.props, { detail: { type: 'mask' } }));
            }
        },
        onDismiss: function () {
            var onDismiss = this.props.onDismiss;
            this.setData({
                visible: false,
            });
            this.triggerPicker(false);
            if (onDismiss) {
                return onDismiss((0, fmtEvent_1.default)(this.props, { detail: { type: 'cancel' } }));
            }
        },
        onChange: function (e) {
            var onChange = this.props.onChange;
            var selectedIndex = e.detail.value;
            this.tempSelectedIndex = selectedIndex;
            this.isChangingPickerView = true;
            var _a = (0, utils_1.getMatchedItemByIndex)(this.data.columns, this.tempSelectedIndex, this.single), matchedColumn = _a.matchedColumn, matchedValues = _a.matchedValues;
            if (onChange) {
                onChange.call(this, matchedValues, matchedColumn, (0, fmtEvent_1.default)(this.props, e));
            }
        },
        onOk: function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var result, matchedColumn, matchedValues, isContinue;
                return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (this.tempSelectedIndex) {
                                result = (0, utils_1.getMatchedItemByIndex)(this.data.columns, this.tempSelectedIndex, this.single);
                            }
                            else {
                                result = (0, utils_1.getMatchedItemByValue)(this.data.columns, this.data.cValue, this.single);
                            }
                            matchedColumn = result.matchedColumn, matchedValues = result.matchedValues;
                            this.setData({
                                visible: false,
                            });
                            this.triggerPicker(false);
                            if (!this.props.onBeforeOk) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.props.onBeforeOk(matchedValues, matchedColumn, (0, fmtEvent_1.default)(this.props))];
                        case 1:
                            isContinue = _a.sent();
                            if (!isContinue) {
                                return [2 /*return*/];
                            }
                            _a.label = 2;
                        case 2:
                            this.setData({
                                cValue: matchedValues,
                            });
                            if (this.props.onOk) {
                                this.props.onOk.call(this, matchedValues, matchedColumn, (0, fmtEvent_1.default)(this.props));
                            }
                            return [2 /*return*/];
                    }
                });
            });
        },
    },
});