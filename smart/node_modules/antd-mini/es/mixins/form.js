"use strict";
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
/**
 * @description 表单组件绑定处理
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNotFormMode = void 0;
var store_1 = require("../Form/store");
var compareVersion_1 = require("../_util/compareVersion");
exports.default = (function (_a) {
    var _b;
    var _c = _a === void 0 ? {} : _a, _d = _c.trigger, trigger = _d === void 0 ? 'onChange' : _d;
    return {
        props: (_b = {},
            _b[trigger] = function (e) {
                var getCurrentField = this._getCurrentField || this.props._getCurrentField;
                if (!getCurrentField)
                    return;
                var _a = getCurrentField(), formFn = _a.form, fieldFn = _a.field;
                var form = formFn();
                var field = fieldFn();
                if (form && field) {
                    store_1.store.trigger(form, field, e);
                }
            },
            _b._getCurrentField = function () {
                return { form: function () { return ''; }, field: function () { return ''; } };
            },
            _b.valuePropName = 'cValue',
            _b.mode = 'normal',
            _b),
        onInit: function () {
            var _this = this;
            if (compareVersion_1.isMoreThan106 && isNotFormMode(this.props.mode))
                return;
            var getCurrentField = this.$page._getCurrentField;
            if (!getCurrentField)
                return;
            this.props._getCurrentField = getCurrentField;
            var _a = getCurrentField(), formFn = _a.form, fieldFn = _a.field;
            var form = formFn();
            var field = fieldFn();
            store_1.store.addFieldSet(form, field);
            // 初始值设定
            var initVal = store_1.store.getInitValByField(form, field);
            this.props.value = initVal;
            // terms组件
            if (typeof initVal === 'boolean') {
                this.props.checked = initVal;
            }
            // 兼容一下 checkbox-group
            var commonUpdateFieldValue = function (v) {
                var _a;
                _this.props.value = v;
                _this.setData((_a = {},
                    _a[_this.props.valuePropName] = v,
                    _a));
            };
            var updateFieldValue = this._updateFieldValue || commonUpdateFieldValue;
            store_1.store.addUpdateFiledValue(form, field, updateFieldValue.bind(this));
        },
        didMount: function () {
            if (compareVersion_1.isMoreThan106 && isNotFormMode(this.props.mode)) {
                this.$page._currentSetData = null;
            }
            else {
                this.$page._currentSetData = this.setData;
            }
        },
    };
});
/**
 * 判断组件是否为表单模式
 * @param props 组件 props
 * @returns
 */
function isNotFormMode(mode) {
    return mode !== 'form';
}
exports.isNotFormMode = isNotFormMode;