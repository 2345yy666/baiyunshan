"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/* eslint-disable @typescript-eslint/no-explicit-any */
var fast_deep_equal_1 = tslib_1.__importDefault(require("fast-deep-equal"));
/**
 * @description 处理通用受控非受控模式
 * @param propsValue 一般是 'value', 也可能是 'checked', 甚至是自定的，比如 'activeIndex'
 *
 * export default {
 *  mixins: [controlled],
 *  methods: {
 *    handleChange(e) {
 *      this.cOnChange(e.detail.value)
 *    }
 *  }
 * }
 *
 * <input onChange="handleChange" value="{{cValue}}" />
 *
 *
 * export default {
 *  mixins: [controlled('checked')],
 *  methods: {
 *    handleChange(e) {
 *      this.cOnChange(e.detail.value)
 *    }
 *  }
 * }
 *
 * <checkbox onChange="handleChange" checked="{{cValue}}" />
 */
exports.default = (function (propsValue) {
    if (propsValue === void 0) { propsValue = 'value'; }
    return ({
        data: {
            cValue: null,
        },
        didMount: function () {
            var _this = this;
            this.cTrigger = function (v) {
                _this.setData({
                    cValue: v,
                });
            };
            this.cTrigger(this.props[propsValue]);
        },
        didUpdate: function (prevProps) {
            var value = this.props[propsValue];
            if (!(0, fast_deep_equal_1.default)(prevProps[propsValue], value)) {
                this.cTrigger(value);
            }
        },
        methods: {
            cOnChange: function (v) {
                var _a, _b;
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (!this.props.controlled) {
                    this.cTrigger(v);
                }
                (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call.apply(_b, tslib_1.__spreadArray([_a, v], args, false));
            },
            cOnInput: function (v) {
                var _a, _b;
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (!this.props.controlled) {
                    this.cTrigger(v);
                }
                (_b = (_a = this.props).onInput) === null || _b === void 0 ? void 0 : _b.call.apply(_b, tslib_1.__spreadArray([_a, v], args, false));
            },
        },
    });
});