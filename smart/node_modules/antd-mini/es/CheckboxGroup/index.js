"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var props_1 = require("./props");
var fast_deep_equal_1 = tslib_1.__importDefault(require("fast-deep-equal"));
var context_1 = require("./context");
var form_1 = tslib_1.__importDefault(require("../mixins/form"));
var fmtEvent_1 = tslib_1.__importDefault(require("../_util/fmtEvent"));
Component({
    props: props_1.CheckboxGroupDefaultProps,
    mixins: [(0, form_1.default)()],
    didMount: function () {
        var _this = this;
        var _a = this.props, uid = _a.uid, value = _a.value, disabled = _a.disabled;
        var getGroupPropsVal = function (key) {
            switch (key) {
                case 'onChange':
                    if (_this.onChange) {
                        return _this.onChange.bind(_this);
                    }
                    return _this.props.onChange;
                case 'value':
                    if (Array.isArray(_this.props.value)) {
                        return _this.props.value;
                    }
                    return [];
                default:
                    return _this.props[key];
            }
        };
        var key = "".concat(this.$page.$id, "-").concat(uid);
        context_1.store.setGroupPropsVal(key, getGroupPropsVal);
        if (disabled) {
            context_1.store.updateGroupDisabled(key, disabled);
        }
        if (Array.isArray(value) && value.length > 0) {
            context_1.store.updateGroupValue(key, value);
        }
    },
    didUpdate: function (prevProps, prevData) {
        var _a = this.props, newUID = _a.uid, newDisabled = _a.disabled, newValue = _a.value;
        var oldUID = prevProps.uid, oldDisabled = prevProps.disabled, oldValue = prevProps.value;
        var newKey = "".concat(this.$page.$id, "-").concat(newUID);
        var oldKey = "".concat(this.$page.$id, "-").concat(oldUID);
        context_1.store.updateGroup(newKey, {
            isUIDChanged: newUID !== oldUID,
            isDisabledChanged: newDisabled !== oldDisabled,
            isValueChange: !(0, fast_deep_equal_1.default)(newValue, oldValue),
        }, { oldUID: oldKey });
    },
    didUnmount: function () {
        var uid = this.props.uid;
        var key = "".concat(this.$page.$id, "-").concat(uid);
        context_1.store.removeGroup(key);
    },
    methods: {
        onChange: function (val) {
            if (this.props.onChange) {
                this.props.onChange.call(this, val, (0, fmtEvent_1.default)(this.props));
            }
        },
        _updateFieldValue: function (v) {
            var key = "".concat(this.$page.$id, "-").concat(this.props.uid);
            context_1.store.updateGroupValue(key, v);
        },
    },
});