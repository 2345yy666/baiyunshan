"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var props_1 = require("./props");
var context_1 = require("../context");
Component({
    props: props_1.CheckboxItemDefaultProps,
    data: {
        _checked: false,
        _disabled: false,
    },
    didMount: function () {
        var _this = this;
        var uid = this.props.uid;
        var key = "".concat(this.$page.$id, "-").concat(uid);
        var setDisabled = function (_disabled) { return _this.setData({ _disabled: _disabled }); };
        var setChecked = function (_checked) { return _this.setData({ _checked: _checked }); };
        var getChecked = function () { return _this.data._checked; };
        var getItemPropsVal = function (key) { return _this.props[key]; };
        context_1.store.addItem(key, "".concat(this.$id), { setDisabled: setDisabled, getChecked: getChecked, setChecked: setChecked, getItemPropsVal: getItemPropsVal });
        // 用户指定checkBoxItem的key，节点变更如下：123456 -> 78，节点不会复用，只能在创建节点的时候更新
        try {
            context_1.store.updateItemValue(key, "".concat(this.$id));
            // eslint-disable-next-line no-empty
        }
        catch (err) { }
    },
    didUpdate: function (prevProps) {
        var _a = this.props, uid = _a.uid, value = _a.value;
        var oldValue = prevProps.value;
        if (value !== oldValue) {
            var key = "".concat(this.$page.$id, "-").concat(uid);
            // 考虑到a:for的情况
            context_1.store.updateItemValue(key, "".concat(this.$id));
        }
    },
    didUnmount: function () {
        var uid = this.props.uid;
        var key = "".concat(this.$page.$id, "-").concat(uid);
        context_1.store.removeItem(key, "".concat(this.$id));
    },
    methods: {
        onItemChange: function (value) {
            var uid = this.props.uid;
            var key = "".concat(this.$page.$id, "-").concat(uid);
            context_1.store.triggerItem(key, "".concat(this.$id), value);
        },
    },
});