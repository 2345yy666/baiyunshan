"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var store_1 = require("../store");
Component({
    props: {
        rules: [],
        name: 'default',
        form: 'default',
        initialValue: '',
        position: 'horizontal',
        required: false,
    },
    data: {
        // eslint-disable-next-line @typescript-eslint/no-empty-function
        setData: function () { },
        errorInfo: null,
        helpVisible: false,
    },
    onInit: function () {
        var _this = this;
        var _a = this.props, form = _a.form, field = _a.name, rules = _a.rules, initialValue = _a.initialValue, required = _a.required;
        if (form && field) {
            this.$page._getCurrentField = function () {
                return { form: function () { return _this.props.form; }, field: function () { return _this.props.name; } };
            };
            store_1.store.bootstrap(form, field, rules, initialValue, required);
        }
    },
    didMount: function () {
        this.data.setData = this.$page._currentSetData;
        if (!this.data.setData)
            return;
        var _a = this.props, form = _a.form, field = _a.name;
        if (form && field) {
            store_1.store.setValueAfterUpdate(this.data.setData, form, field);
            store_1.store.setFieldUpdateInfoFn(form, field, this.updateErrorInfo.bind(this));
            if (field === 'submit') {
                store_1.store.setUpdateSubmitButtonStatusFn(form, field, this.updateSubmitButtonStatus.bind(this));
            }
        }
    },
    didUpdate: function (prevProps) {
        var currentField = prevProps.name;
        var _a = this.props, form = _a.form, nextField = _a.name;
        if (currentField && nextField && currentField !== nextField) {
            store_1.store.setValueAfterUpdate(this.data.setData, form, nextField);
            store_1.store.updateFieldSet(form, currentField, nextField);
        }
    },
    didUnmount: function () {
        var _a = this.props, form = _a.form, field = _a.name;
        store_1.store.delFieldSet(form, field);
    },
    methods: {
        updateErrorInfo: function (payload) {
            this.setData({ errorInfo: payload });
        },
        updateSubmitButtonStatus: function (payload) {
            this.setData({ submitDisable: !!payload });
        },
        onToggleHelpVisible: function () {
            this.setData({ helpVisible: !this.data.helpVisible });
        },
        onHelpVisibleChange: function (visible, type) {
            if (type === 'mask') {
                this.setData({ helpVisible: visible });
            }
        },
    },
});