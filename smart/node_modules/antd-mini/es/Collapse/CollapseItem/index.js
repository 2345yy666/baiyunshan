"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var props_1 = require("./props");
var context_1 = require("../context");
var console_1 = require("../../_util/console");
var tools_1 = require("../../_util/tools");
Component({
    props: props_1.CollapseItemDefaultProps,
    data: {
        _isActive: false,
        contentHeight: '',
        lastAction: 'auto',
        supportSjs: my.canIUse('sjs.event'),
        // 避免appx1.0下首次页面加载出现过渡动画
        _first: -1,
        accordion: false,
        disabled: false,
        expandIcon: '',
        closeIcon: '',
    },
    didMount: function () {
        var _this = this;
        var _a = this.props, name = _a.name, disabled = _a.disabled, expandIcon = _a.expandIcon, closeIcon = _a.closeIcon;
        var key = "".concat(this.$page.$id, "-").concat(this.props.uid);
        if (typeof name !== 'string') {
            console_1.log.error('CollapseItem', 'name 作为唯一的标识，属必填字段，类型为 string。');
        }
        this.setData({
            disabled: disabled,
            expandIcon: expandIcon,
            closeIcon: closeIcon,
        });
        var setActive = function (_isActive) { return _this.setData({ _isActive: _isActive }); };
        var getActive = function () { return _this.data._isActive; };
        var getItemPropsVal = function (key) { return _this.props[key]; };
        var setFirst = function () { return _this.setData({ _first: _this.data._first + 1 }); };
        var getFirst = function () { return _this.data._first; };
        var getId = function () { return "".concat(_this.$id); };
        var setLastAction = function (lastAction) { return _this.setData({ lastAction: lastAction }); };
        var setAccordion = function (accordion) { return _this.setData({ accordion: accordion }); };
        var setContentHeight = function (contentHeight) { return _this.setData({ contentHeight: contentHeight }); };
        var getContentHeight = function () { return _this.calcContentHeight(); };
        var getSupportSjs = function () { return _this.data.supportSjs; };
        var getDisabled = function () { return _this.props.disabled; };
        context_1.context.addItem(key, "".concat(this.$id), {
            setActive: setActive,
            setAccordion: setAccordion,
            getActive: getActive,
            setFirst: setFirst,
            getItemPropsVal: getItemPropsVal,
            setLastAction: setLastAction,
            getId: getId,
            getFirst: getFirst,
            setContentHeight: setContentHeight,
            getContentHeight: getContentHeight,
            getSupportSjs: getSupportSjs,
            getDisabled: getDisabled,
        });
        try {
            context_1.context.updateItemValue(key, "".concat(this.$id));
            // eslint-disable-next-line no-empty
        }
        catch (err) { }
    },
    didUnmount: function () {
        var key = "".concat(this.$page.$id, "-").concat(this.props.uid);
        context_1.context.removeItem(key, "".concat(this.$id));
    },
    didUpdate: function (prevProps) {
        if (prevProps.disabled !== this.props.disabled) {
            this.setData({
                disabled: this.props.disabled,
            });
        }
        if (prevProps.expandIcon !== this.props.expandIcon) {
            this.setData({
                expandIcon: this.props.expandIcon,
            });
        }
        if (prevProps.closeIcon !== this.props.closeIcon) {
            this.setData({
                closeIcon: this.props.closeIcon,
            });
        }
    },
    methods: {
        _changeItem: function () {
            var _this = this;
            if (this.props.disabled)
                return;
            var key = "".concat(this.$page.$id, "-").concat(this.props.uid);
            if (this.data.supportSjs) {
                // for 2.0
                context_1.context.triggerItem(key, "".concat(this.$id), !this.data._isActive);
                return;
            }
            var group = context_1.context.getGroup(key);
            if (group) {
                var accordion = group ? group.getGroupPropsVal('accordion') : false;
                if (accordion) {
                    var onChange_1 = group.getGroupPropsVal('onChange');
                    (0, tools_1.objectEntries)(group.items).forEach(function (_a) {
                        var val = _a[1];
                        if (!val)
                            return;
                        if (val.getId() === "".concat(_this.$id)) {
                            if (_this.data._isActive) {
                                _this.calcContentHeight().then(function (contentHeight) {
                                    _this.setData({
                                        contentHeight: contentHeight,
                                    });
                                    setTimeout(function () {
                                        _this.setData({
                                            _isActive: false,
                                            contentHeight: '0px',
                                            _first: _this.data._first + 1,
                                        }, function () {
                                            onChange_1([]);
                                        });
                                    }, 10);
                                });
                            }
                            else {
                                _this.calcContentHeight().then(function (contentHeight) {
                                    _this.setData({
                                        contentHeight: '0px',
                                    });
                                    setTimeout(function () {
                                        _this.setData({
                                            _isActive: true,
                                            contentHeight: contentHeight,
                                            _first: _this.data._first + 1,
                                        }, function () {
                                            onChange_1([_this.props.name]);
                                        });
                                    }, 10);
                                });
                            }
                        }
                        else {
                            if (val.getActive() === false)
                                return;
                            val.getContentHeight().then(function (contentHeight) {
                                val.setContentHeight(contentHeight);
                                val.setFirst();
                                setTimeout(function () {
                                    val.setActive(false);
                                    val.setContentHeight('0px');
                                }, 10);
                            });
                        }
                    });
                }
                else {
                    this.fallbackCollapse(this.data._isActive);
                }
            }
        },
        calcContentHeight: function () {
            var _this = this;
            return new Promise(function (resolve, reject) {
                my.createSelectorQuery()
                    .select(".amd-collapse-item-content-".concat(_this.$id))
                    .boundingClientRect()
                    .exec(function (res) {
                    if (res && res[0]) {
                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                        // @ts-ignore
                        resolve("".concat(res[0].height, "px"));
                    }
                    else {
                        reject(res);
                    }
                });
            });
        },
        fallbackCollapse: function (isActive) {
            var _this = this;
            if (isActive) {
                // for 1.0 open -> close
                this.calcContentHeight().then(function (contentHeight) {
                    _this.setData({
                        contentHeight: contentHeight,
                    });
                    setTimeout(function () {
                        _this.setData({
                            _isActive: false,
                            contentHeight: '0px',
                            _first: _this.data._first + 1,
                        }, function () {
                            var key = "".concat(_this.$page.$id, "-").concat(_this.props.uid);
                            context_1.context.onChangeByTrigger(key);
                        });
                    }, 10);
                });
            }
            else {
                // for 1.0 close -> open
                this.calcContentHeight().then(function (contentHeight) {
                    _this.setData({
                        _isActive: true,
                        contentHeight: contentHeight,
                        _first: _this.data._first + 1,
                    }, function () {
                        var key = "".concat(_this.$page.$id, "-").concat(_this.props.uid);
                        context_1.context.onChangeByTrigger(key);
                    });
                });
            }
        },
        resetContentHeight: function () {
            var _this = this;
            if (this.data._isActive) {
                setTimeout(function () {
                    _this.setData({
                        contentHeight: 'auto',
                    });
                }, 10);
            }
        },
    },
});