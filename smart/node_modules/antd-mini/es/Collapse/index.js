"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var props_1 = require("./props");
var context_1 = require("./context");
var fast_deep_equal_1 = tslib_1.__importDefault(require("fast-deep-equal"));
Component({
    props: props_1.CollapseDefaultProps,
    data: {
        supportSjs: my.canIUse('sjs.event'),
    },
    didMount: function () {
        var _this = this;
        var name = this.props.name;
        var key = "".concat(this.$page.$id, "-").concat(this.props.uid);
        var getGroupPropsVal = function (key) {
            switch (key) {
                case 'onChange':
                    if (_this.onChange) {
                        return _this.onChange.bind(_this);
                    }
                    return _this.props.onChange;
                case 'name':
                    if (Array.isArray(_this.props.name)) {
                        return _this.props.name;
                    }
                    return [];
                default:
                    return _this.props[key];
            }
        };
        context_1.context.addGroup(key);
        context_1.context.setGroupPropsVal(key, getGroupPropsVal);
        context_1.context.setItemsAccordion(key);
        if (Array.isArray(name)) {
            context_1.context.updateGroupValue(key, true);
        }
    },
    didUnmount: function () {
        var key = "".concat(this.$page.$id, "-").concat(this.props.uid);
        context_1.context.removeGroup(key);
    },
    didUpdate: function (prevProps) {
        var _a = this.props, newUID = _a.uid, _b = _a.name, newName = _b === void 0 ? [] : _b, _c = _a.accordion, newAccordion = _c === void 0 ? false : _c;
        var oldUID = prevProps.uid, _d = prevProps.name, oldName = _d === void 0 ? [] : _d, _e = prevProps.accordion, oldAccordion = _e === void 0 ? false : _e;
        var newKey = "".concat(this.$page.$id, "-").concat(newUID);
        var oldKey = "".concat(this.$page.$id, "-").concat(oldUID);
        context_1.context.updateGroup(newUID, {
            isNameChanged: !(0, fast_deep_equal_1.default)(newName, oldName),
            isUIDChanged: newKey !== oldKey,
            isAccordionChanged: newAccordion !== oldAccordion,
        }, { oldUID: oldKey });
    },
});