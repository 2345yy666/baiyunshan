"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var props_1 = require("./props");
Component({
    props: props_1.TabsElevatorDefaultProps,
    data: {
        activeIndex: 0,
        scrollTop: 0,
        statusBarHeight: 0,
    },
    topHeight: 0,
    tabPositions: null,
    disableSetActiveByTapTab: false,
    scrollY: 0,
    didMount: function () {
        var _a = this.props, getRef = _a.getRef, transparentTitle = _a.transparentTitle;
        if (transparentTitle) {
            var res = my.getSystemInfoSync();
            var statusBarHeight = res.statusBarHeight + res.titleBarHeight;
            this.setData({ statusBarHeight: statusBarHeight });
        }
        this.getTopHeight();
        this.getTabPositions();
        if (getRef) {
            getRef(this);
        }
    },
    didUpdate: function () {
        this.getTabPositions();
    },
    pageEvents: {
        onPageScroll: function (e) {
            var scrollY = e.scrollTop;
            this.scrollY = scrollY;
            var tabs = this.props.tabs;
            if (!tabs || tabs.length === 0)
                return;
            this.setActiveIndex(true);
        },
    },
    methods: {
        getTabPositions: function () {
            var _this = this;
            return new Promise(function (resolve) {
                my.createSelectorQuery()
                    .selectAll('.amd-tabs-elevator-content-item')
                    .boundingClientRect()
                    .exec(function (ret) {
                    if (ret === null || ret === void 0 ? void 0 : ret[0]) {
                        _this.tabPositions = ret[0];
                    }
                    resolve(null);
                });
            });
        },
        getTopHeight: function () {
            var _this = this;
            my.createSelectorQuery()
                .select('.amd-tabs-elevator-bar')
                .boundingClientRect()
                .exec(function (ret) {
                if (ret[0]) {
                    _this.setTopHeight(ret[0].top);
                }
            });
        },
        setActiveIndex: function (isScroll) {
            if (isScroll === void 0) { isScroll = false; }
            var _a = this, scrollY = _a.scrollY, tabPositions = _a.tabPositions, disableSetActiveByTapTab = _a.disableSetActiveByTapTab, topHeight = _a.topHeight;
            var _b = this.data, currentActiveIndex = _b.activeIndex, statusBarHeight = _b.statusBarHeight;
            var onChange = this.props.onChange;
            if (disableSetActiveByTapTab)
                return;
            if (tabPositions) {
                var activeIndex = -1;
                for (var i = 0; i < tabPositions.length; i++) {
                    if (scrollY + statusBarHeight >=
                        topHeight +
                            tabPositions
                                .slice(0, i)
                                .reduce(function (re, item) { return re + item.height; }, 0) &&
                        scrollY + statusBarHeight <
                            topHeight +
                                tabPositions
                                    .slice(0, i + 1)
                                    .reduce(function (re, item) { return re + item.height; }, 0)) {
                        activeIndex = i;
                        break;
                    }
                }
                if (scrollY < topHeight) {
                    activeIndex = 0;
                }
                if (activeIndex !== currentActiveIndex) {
                    this.setData({ activeIndex: activeIndex });
                    if (isScroll) {
                        if (onChange) {
                            onChange(activeIndex, 'scroll');
                        }
                    }
                }
            }
        },
        onTabClick: function (index) {
            this.setActiveTab(index);
        },
        setTopHeight: function (height) {
            this.topHeight = height;
        },
        setActiveTab: function (index) {
            var _this = this;
            var _a = this.props, onTabClick = _a.onTabClick, onChange = _a.onChange;
            var _b = this, tabPositions = _b.tabPositions, topHeight = _b.topHeight;
            if (tabPositions) {
                var _c = this.data, activeIndex = _c.activeIndex, statusBarHeight = _c.statusBarHeight;
                activeIndex = index;
                this.disableSetActiveByTapTab = true;
                var scrollTop = topHeight +
                    tabPositions
                        .slice(0, index)
                        .reduce(function (re, item) { return re + item.height; }, 0) -
                    statusBarHeight;
                my.pageScrollTo({ scrollTop: scrollTop });
                this.setData({ scrollTop: scrollTop, activeIndex: activeIndex });
                if (onTabClick) {
                    onTabClick(index);
                }
                if (onChange) {
                    onChange(index, 'click');
                }
                // 此处加入500ms延迟，避免滚动时触发setActiveIndex事件
                setTimeout(function () {
                    _this.disableSetActiveByTapTab = false;
                }, 500);
            }
        },
    },
});