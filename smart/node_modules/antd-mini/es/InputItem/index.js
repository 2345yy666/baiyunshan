"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var props_1 = require("./props");
var controlled_1 = tslib_1.__importDefault(require("../mixins/controlled"));
var form_1 = tslib_1.__importDefault(require("../mixins/form"));
var fmtEvent_1 = tslib_1.__importDefault(require("../_util/fmtEvent"));
var store_1 = require("../Form/store");
Component({
    mixins: [(0, controlled_1.default)(), (0, form_1.default)()],
    props: props_1.InputItemDefaultProps,
    data: {
        showClear: false,
    },
    methods: {
        hideClear: function () {
            this.setData({
                showClear: false,
            });
        },
        showClear: function () {
            this.setData({
                showClear: true,
            });
        },
        // 按钮消失
        onBlur: function (e) {
            this.hideClear();
            var onBlur = this.props.onBlur;
            if (onBlur) {
                var value = e.detail.value;
                onBlur(value, (0, fmtEvent_1.default)(this.props, e));
            }
        },
        // 按钮消失
        onConfirm: function (e) {
            this.hideClear();
            var onConfirm = this.props.onConfirm;
            if (onConfirm) {
                var value = e.detail.value;
                onConfirm(value, (0, fmtEvent_1.default)(this.props, e));
            }
        },
        // 展示无需蒙层
        onFocus: function (e) {
            this.showClear();
            var onFocus = this.props.onFocus;
            if (onFocus) {
                var value = e.detail.value;
                onFocus(value, (0, fmtEvent_1.default)(this.props, e));
            }
        },
        onChange: function (e) {
            var onChange = this.props.onChange;
            if (onChange) {
                var value = e.detail.value;
                this.cOnChange(value, (0, fmtEvent_1.default)(this.props, e));
            }
        },
        triggerOnValuesChange: function () {
            // 触发
            var _a = this.props._getCurrentField(), formFn = _a.form, fieldFn = _a.field;
            var form = formFn();
            var field = fieldFn();
            if (form && field) {
                store_1.store.trigger(form, field, '');
            }
        },
        onClear: function (e) {
            this.hideClear();
            var _a = this.props, onClear = _a.onClear, controlled = _a.controlled;
            if (onClear) {
                onClear('', (0, fmtEvent_1.default)(this.props, e));
            }
            if (!controlled) {
                this.setData({
                    cValue: '',
                });
                // 非受控模式下生效
                this.triggerOnValuesChange();
            }
        },
    },
});