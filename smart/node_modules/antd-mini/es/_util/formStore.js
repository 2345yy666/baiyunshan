"use strict";
/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Store = void 0;
var tslib_1 = require("tslib");
var async_validator_1 = tslib_1.__importDefault(require("async-validator"));
var Store = /** @class */ (function () {
    function Store() {
        this.events = {};
        this.formTree = {};
        this.currentField = {};
        this.setFieldsValueTree = {};
    }
    Store.prototype.init = function (form, initVal, onValuesChange, onFinish) {
        var _this = this;
        if (!initVal)
            return;
        Object.keys(initVal).forEach(function (field) {
            if (!_this.formTree[form]) {
                _this.formTree[form] = {};
            }
            if (!_this.formTree[form][field]) {
                _this.formTree[form][field] = {};
            }
            _this.formTree[form][field].value = initVal[field];
        });
        if (!this.events[form]) {
            this.events[form] = [onValuesChange, onFinish];
        }
        if (!this.currentField[form]) {
            this.currentField[form] = [];
        }
        setTimeout(function () {
            _this.initValidator(form);
        }, 0);
    };
    Store.prototype.getInitValByField = function (form, field) {
        return this.formTree[form][field].value;
    };
    Store.prototype.bootstrap = function (form, field, rules, initialValue, required) {
        if (!this.formTree[form]) {
            this.formTree[form] = {};
        }
        if (!this.currentField[form]) {
            this.currentField[form] = [];
        }
        if (!this.formTree[form][field]) {
            this.formTree[form][field] = {};
        }
        var prevVal = this.formTree[form][field].value;
        this.formTree[form][field].value = prevVal || initialValue || '';
        this.formTree[form][field].rules = rules;
        this.formTree[form][field].required = required;
    };
    Store.prototype.addFieldSet = function (form, field) {
        if (!this.currentField[form]) {
            this.currentField[form] = [];
        }
        this.currentField[form].push(field);
        this.initValidator(form);
    };
    Store.prototype.updateFieldSet = function (form, prev, cur) {
        var prevRealFieldIndex = this.currentField[form].find(function (item) { return item === prev; });
        this.currentField[form].splice(prevRealFieldIndex, 1);
        this.currentField[form].push(cur);
    };
    Store.prototype.addUpdateFiledValue = function (form, field, updateFieldValue) {
        if (this.formTree[form] && this.formTree[form][field]) {
            var updateFiledValueArr = this.formTree[form][field].updateFieldValue;
            if (Array.isArray(updateFiledValueArr)) {
                updateFiledValueArr.push(updateFieldValue);
            }
            else {
                this.formTree[form][field].updateFieldValue = [updateFieldValue];
            }
        }
    };
    // TODO update 数组--->需要解耦
    Store.prototype.setValueAfterUpdate = function (setData, form, next) {
        var val = this.formTree[form][next].value || '';
        setData({
            cValue: val,
        });
    };
    Store.prototype.setFieldUpdateInfoFn = function (form, field, fn) {
        this.formTree[form][field].updateErrorInfo = fn;
    };
    Store.prototype.setUpdateSubmitButtonStatusFn = function (form, field, fn) {
        this.formTree[form][field].updateSubmitButtonStatus = fn;
    };
    Store.prototype.delFieldSet = function (form, field) {
        var realFieldIndex = this.currentField[form].findIndex(function (item) { return item === field; });
        this.currentField[form].splice(realFieldIndex, 1);
        if (this.formTree[form] && this.formTree[form][field]) {
            this.formTree[form][field] = null;
        }
        this.initValidator(form);
    };
    Store.prototype.getTotalValue = function (form) {
        var formData = this.formTree[form];
        var currentField = this.currentField[form];
        return Object.keys(formData).reduce(function (prev, cur) {
            if (currentField.indexOf(cur) > -1) {
                // eslint-disable-next-line no-param-reassign
                prev[cur] = formData[cur].value;
            }
            return prev;
        }, {});
    };
    Store.prototype.getFields = function (form) {
        if (!this.formTree[form])
            return;
        if (!this.currentField[form])
            return;
        var formData = this.formTree[form];
        var currentField = this.currentField[form];
        return Object.keys(formData).reduce(function (prev, cur) {
            if (currentField.indexOf(cur) > -1) {
                // eslint-disable-next-line no-param-reassign
                prev[cur] = formData[cur];
            }
            return prev;
        }, {});
    };
    Store.prototype.trigger = function (form, field, val) {
        var _a, _b;
        var _this = this;
        this.formTree[form][field].value = val;
        var handlers = this.events[form][0];
        var values = this.getTotalValue(form);
        this.formTree[form].validator.validate(tslib_1.__assign(tslib_1.__assign({}, values), (_a = {}, _a[field] = val, _a)), function (errors) {
            var _a, _b;
            var updateErrorInfo = (_a = _this.formTree[form][field]) === null || _a === void 0 ? void 0 : _a.updateErrorInfo;
            var updateSubmitButtonStatus = (_b = _this.formTree[form].submit) === null || _b === void 0 ? void 0 : _b.updateSubmitButtonStatus;
            if (!errors) {
                updateErrorInfo === null || updateErrorInfo === void 0 ? void 0 : updateErrorInfo(null);
                updateSubmitButtonStatus === null || updateSubmitButtonStatus === void 0 ? void 0 : updateSubmitButtonStatus(null);
                return;
            }
            var error = errors.filter(function (item) { return item.field === field; })[0];
            if (error) {
                updateErrorInfo === null || updateErrorInfo === void 0 ? void 0 : updateErrorInfo(tslib_1.__assign({}, error));
            }
            else {
                updateErrorInfo === null || updateErrorInfo === void 0 ? void 0 : updateErrorInfo(null);
            }
            updateSubmitButtonStatus === null || updateSubmitButtonStatus === void 0 ? void 0 : updateSubmitButtonStatus(!!errors.length);
        });
        var totalVal = this.getTotalValue(form);
        handlers((_b = {}, _b[field] = val, _b), totalVal);
    };
    Store.prototype.validateAll = function (form) {
        var _this = this;
        return new Promise(function (resolve) {
            var values = _this.getTotalValue(form);
            _this.formTree[form].validator.validate(values, function (errors) {
                var _a;
                if (!errors) {
                    return resolve(true);
                }
                var errFields = errors.reduce(function (prev, cur) {
                    prev[cur.field] = cur;
                    return prev;
                }, {});
                var fields = _this.getFields(form);
                if (!fields)
                    return;
                Object.keys(fields).forEach(function (field) {
                    var _a, _b;
                    if (!errFields[field]) {
                        (_a = _this.formTree[form][field]) === null || _a === void 0 ? void 0 : _a.updateErrorInfo(null);
                    }
                    else {
                        (_b = _this.formTree[form][field]) === null || _b === void 0 ? void 0 : _b.updateErrorInfo(tslib_1.__assign({}, errFields[field]));
                    }
                });
                var updateSubmitButtonStatus = (_a = _this.formTree[form].submit) === null || _a === void 0 ? void 0 : _a.updateSubmitButtonStatus;
                if (errors.length) {
                    // errors.forEach(err => {
                    //   this.formTree[form][err.field]?.updateErrorInfo({ ...err });
                    // });
                    my.alert({ title: errors[0].message });
                }
                updateSubmitButtonStatus === null || updateSubmitButtonStatus === void 0 ? void 0 : updateSubmitButtonStatus(!!errors.length);
                resolve(!errors.length);
            });
        });
    };
    Store.prototype.setFieldsValue = function (form, value) {
        var _this = this;
        Object.keys(value).forEach(function (key) {
            if (_this.currentField[form] && _this.currentField[form].find(function (item) { return item === key; })) {
                if (!_this.formTree[form][key] || !_this.formTree[form][key].updateFieldValue)
                    return;
                _this.formTree[form][key].updateFieldValue.forEach(function (fn) {
                    if (typeof fn === 'function') {
                        _this.formTree[form][key].value = value[key];
                        fn(value[key]);
                    }
                });
            }
        });
        this.validateAll(form);
    };
    Store.prototype.onFinish = function (form) {
        return tslib_1.__awaiter(this, void 0, Promise, function () {
            var success;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!form)
                            return [2 /*return*/];
                        return [4 /*yield*/, this.validateAll(form())];
                    case 1:
                        success = _a.sent();
                        if (!success)
                            return [2 /*return*/];
                        this.events[form()][1](this.getTotalValue(form()));
                        return [2 /*return*/];
                }
            });
        });
    };
    Store.prototype.tear = function (formName) {
        this.formTree[formName] = null;
        this.events[formName] = null;
    };
    Store.prototype.initValidator = function (form) {
        var fields = this.getFields(form);
        if (!fields)
            return;
        var descriptor = {};
        Object.keys(fields).forEach(function (field) {
            var _a = fields[field], rules = _a.rules, required = _a.required, label = _a.label;
            if (Array.isArray(rules)) {
                descriptor[field] = tslib_1.__spreadArray([], rules, true);
            }
            if (required) {
                var requiredItem = { required: required, message: label ? "\u8BF7\u8F93\u5165".concat(label) : '请输入必填项' };
                if (descriptor[field]) {
                    descriptor[field].unshift(requiredItem);
                }
                else {
                    descriptor[field] = [requiredItem];
                }
            }
        });
        this.formTree[form].validator = new async_validator_1.default(descriptor);
    };
    return Store;
}());
exports.Store = Store;