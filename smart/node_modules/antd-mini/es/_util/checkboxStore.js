"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CheckBoxStore = void 0;
var tslib_1 = require("tslib");
var baseStore_1 = require("./baseStore");
var tools_1 = require("./tools");
var CheckBoxStore = /** @class */ (function (_super) {
    tslib_1.__extends(CheckBoxStore, _super);
    function CheckBoxStore() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CheckBoxStore.prototype.checkControlledByUID = function (uid) {
        return this.itemsMap[uid].getGroupPropsVal('controlled');
    };
    CheckBoxStore.prototype.updateGroup = function (newUID, _a, _b) {
        var isUIDChanged = _a.isUIDChanged, isDisabledChanged = _a.isDisabledChanged, isValueChange = _a.isValueChange;
        var oldUID = _b.oldUID;
        if (isUIDChanged) {
            this.updateGroupUID(oldUID, newUID);
        }
        var group = this.getGroup(newUID);
        if (isDisabledChanged && group) {
            var groupDisabled = group.getGroupPropsVal('disabled');
            this.updateGroupDisabled(newUID, groupDisabled);
        }
        if (isValueChange) {
            this.updateGroupValue(newUID);
        }
    };
    /**
       * 修改 CheckboxGroup 的 value 以改变 CheckboxItem 的选中状态
       * @param uid CheckboxGroup 与 其子 CheckboxItem 共同的 uid
       * @param value 外部传入的值
       */
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    CheckBoxStore.prototype.updateGroupValue = function (uid, value) {
        if (this.itemsMap[uid] && this.itemsMap[uid].items) {
            var groupValue_1 = value || this.itemsMap[uid].getGroupPropsVal('value');
            (0, tools_1.objectEntries)(this.itemsMap[uid].items).forEach(function (_a) {
                var val = _a[1];
                if (!val)
                    return;
                if (groupValue_1.indexOf(val.getItemPropsVal('value')) > -1) {
                    val.setChecked(true);
                }
                else {
                    val.setChecked(false);
                }
            });
        }
    };
    CheckBoxStore.prototype.updateGroupDisabled = function (uid, disabled) {
        if (this.itemsMap[uid] && this.itemsMap[uid].items) {
            (0, tools_1.objectEntries)(this.itemsMap[uid].items).forEach(function (_a) {
                var val = _a[1];
                if (!val)
                    return;
                var finalDisbaled = disabled;
                val.setDisabled(finalDisbaled);
            });
        }
    };
    CheckBoxStore.prototype.updateItemDisabled = function (uid, disabled) {
        if (this.itemsMap[uid] && this.itemsMap[uid].items) {
            (0, tools_1.objectEntries)(this.itemsMap[uid].items).forEach(function (_a) {
                var val = _a[1];
                if (!val)
                    return;
                var itemDsiabled = val;
                var finalDisbaled = itemDsiabled && disabled;
                val.setDisabled(finalDisbaled);
            });
        }
    };
    CheckBoxStore.prototype.triggerItem = function (uid, id, checked) {
        if (this.itemsMap[uid] && this.getItem(uid, id)) {
            if (!this.checkControlledByUID(uid)) {
                this.getItem(uid, id).setChecked(checked);
            }
            var onChange = this.itemsMap[uid].getGroupPropsVal('onChange');
            if (onChange) {
                var value = (0, tools_1.objectEntries)(this.itemsMap[uid].items)
                    .filter(function (_a) {
                    var key = _a[0], val = _a[1];
                    if (key === id) {
                        return checked;
                    }
                    return val && val.getChecked() === true;
                })
                    .map(function (_a) {
                    var val = _a[1];
                    return val.getItemPropsVal('value');
                });
                onChange(value);
            }
        }
    };
    CheckBoxStore.prototype.updateItemValue = function (uid, id) {
        if (this.itemsMap[uid] && this.getItem(uid, id)) {
            var groupValue = this.itemsMap[uid].getGroupPropsVal('value');
            var itemValue = this.getItem(uid, id).getItemPropsVal('value');
            if (groupValue.indexOf(itemValue) > -1) {
                this.getItem(uid, id).setChecked(true);
            }
            else {
                this.getItem(uid, id).setChecked(false);
            }
        }
    };
    return CheckBoxStore;
}(baseStore_1.BaseStore));
exports.CheckBoxStore = CheckBoxStore;