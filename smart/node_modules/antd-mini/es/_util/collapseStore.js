"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollapseStore = void 0;
var tslib_1 = require("tslib");
var baseStore_1 = require("./baseStore");
var tools_1 = require("../_util/tools");
var CollapseStore = /** @class */ (function (_super) {
    tslib_1.__extends(CollapseStore, _super);
    function CollapseStore() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CollapseStore.prototype.setItemsAccordion = function (uid) {
        var accordion = !!this.itemsMap[uid].getGroupPropsVal('accordion');
        (0, tools_1.objectEntries)(this.itemsMap[uid].items).forEach(function (_a) {
            var val = _a[1];
            val.setAccordion(accordion);
        });
    };
    CollapseStore.prototype.updateItemValue = function (uid, id) {
        var groupValue = this.itemsMap[uid].getGroupPropsVal('name');
        if (Array.isArray(groupValue)) {
            var val = this.itemsMap[uid].items[id];
            var name = val.getItemPropsVal('name');
            if (groupValue.includes(name)) {
                val.setActive(true);
            }
            val.setLastAction('auto');
            val.setFirst();
        }
    };
    CollapseStore.prototype.updateGroup = function (uid, _a, _b) {
        var isUIDChanged = _a.isUIDChanged, isNameChanged = _a.isNameChanged, isAccordionChanged = _a.isAccordionChanged;
        var oldUID = _b.oldUID;
        if (isUIDChanged) {
            this.updateGroupUID(oldUID, uid);
        }
        if (isNameChanged) {
            this.updateGroupValue(uid);
        }
        if (isAccordionChanged) {
            var accordion_1 = !!this.itemsMap[uid].getGroupPropsVal('accordion');
            (0, tools_1.objectEntries)(this.itemsMap[uid].items).forEach(function (_a) {
                var val = _a[1];
                val.setAccordion(accordion_1);
            });
        }
    };
    /**
     * 修改 Collapse 的 name 以改变 CollapseItem 的展开/关闭
     * @param uid Collapse 与 其子 CollapseItem 共同的 uid
     * @param uid didMount 首次传入值
     * @param value 外部传入的值
     */
    CollapseStore.prototype.updateGroupValue = function (uid, isFirst, value) {
        if (isFirst === void 0) { isFirst = false; }
        if (this.itemsMap[uid] && this.itemsMap[uid].items) {
            var originGroupValue = value || this.itemsMap[uid].getGroupPropsVal('name');
            var groupValue_1 = this.itemsMap[uid].getGroupPropsVal('accordion')
                ? [originGroupValue[0]]
                : originGroupValue;
            if (Array.isArray(groupValue_1)) {
                (0, tools_1.objectEntries)(this.itemsMap[uid].items).forEach(function (_a) {
                    var val = _a[1];
                    if (!val)
                        return;
                    // for 2.0
                    if (val.getSupportSjs()) {
                        if (groupValue_1.indexOf(val.getItemPropsVal('name')) > -1) {
                            val.setActive(true);
                        }
                        else {
                            val.setActive(false);
                        }
                        val.setLastAction('auto');
                        val.setFirst();
                    }
                    else {
                        // for 1.0
                        if (groupValue_1.indexOf(val.getItemPropsVal('name')) > -1) {
                            // close -> open
                            val.getContentHeight().then(function (height) {
                                val.setContentHeight(height);
                                val.setActive(true);
                                val.setFirst();
                            });
                        }
                        else {
                            // open -> close
                            val.getContentHeight().then(function (height) {
                                val.setContentHeight(height);
                                val.setFirst();
                                setTimeout(function () {
                                    val.setActive(false);
                                    val.setContentHeight('0px');
                                }, 10);
                            });
                        }
                        val.setLastAction('auto');
                    }
                    val.setLastAction('auto');
                });
                var onChange = this.itemsMap[uid].getGroupPropsVal('onChange');
                if (typeof onChange === 'function' && !isFirst) {
                    onChange(groupValue_1);
                }
            }
        }
    };
    CollapseStore.prototype.triggerItem = function (uid, id, status) {
        if (this.itemsMap[uid] && this.getItem(uid, id)) {
            if (this.itemsMap[uid].getGroupPropsVal('accordion') === true) {
                var name_1;
                (0, tools_1.objectEntries)(this.itemsMap[uid].items).forEach(function (_a) {
                    var val = _a[1];
                    if (!val)
                        return;
                    if (val.getId() === id) {
                        var active = val.getActive();
                        val.setActive(!active);
                        if (!active) {
                            name_1 = val.getItemPropsVal('name');
                        }
                    }
                    else {
                        val.setActive(false);
                    }
                    val.setLastAction('onTap');
                    val.setFirst();
                });
                var onChange = this.itemsMap[uid].getGroupPropsVal('onChange');
                if (typeof onChange === 'function') {
                    var res = name_1 ? [name_1] : [];
                    onChange(res);
                }
                return;
            }
            this.getItem(uid, id).setActive(status);
            this.itemsMap[uid].items[id].setLastAction('onTap');
            this.onChangeByTrigger(uid);
        }
    };
    CollapseStore.prototype.onChangeByTrigger = function (uid) {
        var onChange = this.itemsMap[uid].getGroupPropsVal('onChange');
        if (typeof onChange === 'function') {
            var value = (0, tools_1.objectEntries)(this.itemsMap[uid].items)
                .filter(function (_a) {
                var val = _a[1];
                return val && val.getActive() === true;
            })
                .map(function (_a) {
                var val = _a[1];
                return val.getItemPropsVal('name');
            });
            onChange(value);
        }
    };
    return CollapseStore;
}(baseStore_1.BaseStore));
exports.CollapseStore = CollapseStore;