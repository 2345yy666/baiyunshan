"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fmtEvent_1 = tslib_1.__importDefault(require("../_util/fmtEvent"));
var props_1 = require("./props");
Component({
    data: {
        rate: 0,
        starWidth: 0
    },
    props: props_1.RateDefaultProps,
    didMount: function () {
        var value = this.props.value;
        if (value !== void 0) {
            var rate = this.formatRate(value);
            this.setData({ rate: rate });
        }
    },
    didUpdate: function (prev) {
        if (prev.value !== this.props.value) {
            var rate = this.formatRate(this.props.value);
            this.setData({ rate: rate });
        }
    },
    methods: {
        formatRate: function (rate) {
            if (rate % 0.5 !== 0) {
                return Math.round(rate);
            }
            return rate;
        },
        handleRateTap: function (e) {
            var _a, _b;
            if (this.props.readOnly || this.props.disabled)
                return;
            var dataset = e.currentTarget.dataset;
            var rate = dataset.rate;
            var newRate = this.calculateRate(rate);
            if (newRate === this.data.rate)
                return;
            this.setData({ rate: newRate });
            (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, newRate, (0, fmtEvent_1.default)(this.props));
        },
        calculateRate: function (rate) {
            var curRate = this.data.rate;
            if (this.props.allowHalf) {
                if (rate == curRate) {
                    // 全星 -> 半星
                    return rate - 0.5;
                }
                else if (rate == curRate + 0.5) {
                    // 全星 -> 半星
                    return curRate + 0.5;
                }
                else {
                    return rate - 0.5;
                }
            }
            return rate;
        },
        handleStarMove: function (e) {
            var _this = this;
            if (this.props.readOnly || this.props.disabled)
                return;
            var touches = e.touches;
            var clientX = touches[0].clientX;
            this.startMove = true;
            my.createSelectorQuery()
                .select(".amd-rate-".concat(this.$id))
                .boundingClientRect()
                .exec(function (res) {
                var pos = res[0];
                var rawValue = ((clientX - pos.left) / pos.width) * _this.props.maxRate;
                var ceiledValue = _this.props.allowHalf
                    ? Math.ceil(rawValue * 2) / 2
                    : Math.ceil(rawValue);
                _this.setData({
                    rate: Math.min(_this.props.maxRate, Math.max(0, ceiledValue))
                });
            });
        },
        handleStarMoveEnd: function () {
            var _a, _b;
            if (this.props.readOnly || this.props.disabled)
                return;
            if (!this.startMove)
                return;
            this.startMove = false;
            (_b = (_a = this.props).onChange) === null || _b === void 0 ? void 0 : _b.call(_a, this.data.rate, (0, fmtEvent_1.default)(this.props));
        }
    },
});