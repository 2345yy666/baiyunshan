"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fast_deep_equal_1 = tslib_1.__importDefault(require("fast-deep-equal"));
var props_1 = require("./props");
Component({
    props: props_1.ChecklistItemDefaultProps,
    data: {
        checked: false
    },
    didMount: function () {
        var checked = this.getChecked();
        this.setData({
            checked: checked
        });
    },
    didUpdate: function (prevProps) {
        var value = prevProps.value, item = prevProps.item, multiple = prevProps.multiple;
        if ((0, fast_deep_equal_1.default)(this.props.value, value) &&
            (0, fast_deep_equal_1.default)(this.props.item, item) &&
            (0, fast_deep_equal_1.default)(this.props.multiple, multiple))
            return;
        var checked = this.getChecked();
        this.setData({
            checked: checked
        });
    },
    methods: {
        onChecklistItemClick: function () {
            var checked = this.data.checked;
            var onChange = this.props.onChange;
            this.setData({
                checked: !checked
            });
            var value = this.getValues(!checked);
            onChange && onChange.call(this.props, value);
        },
        getChecked: function () {
            var _a = this.props, multiple = _a.multiple, item = _a.item, value = _a.value;
            if (!multiple) {
                return value === item.value;
            }
            var valueArr = [];
            if (!Array.isArray(value)) {
                valueArr = [value];
            }
            else {
                valueArr = value.slice();
            }
            return valueArr.indexOf(item.value) > -1;
        },
        getValues: function (checked) {
            var _a = this.props, multiple = _a.multiple, item = _a.item, value = _a.value;
            if (!multiple) {
                return checked ? item.value : '';
            }
            var valueArr = value;
            if (!Array.isArray(value)) {
                valueArr = [value];
            }
            else {
                valueArr = value.slice();
            }
            if (checked && valueArr.indexOf(item.value) === -1) {
                return valueArr.concat([item.value]);
            }
            else {
                return valueArr.filter(function (v) { return v !== item.value; });
            }
        }
    },
});