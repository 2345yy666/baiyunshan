"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var props_1 = require("./props");
var computed_1 = tslib_1.__importDefault(require("../mixins/computed"));
var controlled_1 = tslib_1.__importDefault(require("../mixins/controlled"));
var utils_1 = require("./utils");
var form_1 = tslib_1.__importDefault(require("../mixins/form"));
var fmtEvent_1 = tslib_1.__importDefault(require("../_util/fmtEvent"));
Component({
    mixins: [computed_1.default, (0, controlled_1.default)(), (0, form_1.default)()],
    props: props_1.StepperDefaultProps,
    data: {
        confirm: false,
        _value: null,
    },
    didMount: function () {
        var _a = this.data, min = _a.min, max = _a.max, cValue = _a.cValue;
        if (cValue < min) {
            this.setData({
                cValue: min,
            });
        }
        if (cValue > max) {
            this.setData({
                cValue: max,
            });
        }
    },
    methods: {
        computed: function () {
            var _a = this.props, min = _a.min, max = _a.max;
            var cValue = this.data.cValue;
            if (max === undefined) {
                max = Number.MAX_SAFE_INTEGER;
            }
            if (min === undefined) {
                min = 0;
            }
            if (cValue === undefined) {
                cValue = min;
            }
            return { min: min, max: max, cValue: cValue };
        },
        onInput: function (e) {
            var value = e.detail.value;
            if (value === '') {
                this.setData({
                    _value: '0',
                });
            }
            else {
                this.setData({
                    _value: value,
                });
            }
        },
        onFocus: function (e) {
            var _a, _b;
            var value = e.detail.value;
            (_b = (_a = this.props).onFocus) === null || _b === void 0 ? void 0 : _b.call(_a, value, (0, fmtEvent_1.default)(this.props, e));
        },
        onBlur: function (e) {
            var _a, _b;
            if (this.data.confirm) {
                this.setData({
                    confirm: false,
                });
            }
            else {
                var value = e.detail.value;
                this.setData({
                    _value: null,
                });
                this.cOnChange(this.getInputValue(value), this.getDataSet());
                (_b = (_a = this.props).onBlur) === null || _b === void 0 ? void 0 : _b.call(_a, this.getInputValue(value));
            }
        },
        onConfirm: function (e) {
            var value = e.detail.value;
            this.setData({
                _value: null,
                confirm: true,
            });
            this.cOnChange(this.getInputValue(value), this.getDataSet());
        },
        getInputValue: function (inputValue) {
            var _a = this.props, min = _a.min, max = _a.max;
            var inputValueTemp = null;
            if (!isNaN(Number(inputValue))) {
                if (Number(inputValue) <= min) {
                    inputValueTemp = min;
                }
                else if (Number(inputValue) >= max) {
                    inputValueTemp = max;
                }
                else {
                    inputValueTemp = Number(inputValue);
                }
                return inputValueTemp;
            }
        },
        onChange: function (e) {
            var _a = this.props, step = _a.step, disabled = _a.disabled, precision = _a.precision;
            var _b = this.data, min = _b.min, max = _b.max, cValue = _b.cValue;
            if (!disabled) {
                var mode = e.currentTarget.dataset.mode;
                if (mode === 'minus') {
                    // 【减】按钮的操作
                    var minusTemp = (0, utils_1.downStep)(cValue, step, precision);
                    this.cOnChange(Math.max(minusTemp, min), this.getDataSet());
                }
                else if (mode === 'add') {
                    // 【加】按钮的操作
                    var addTemp = (0, utils_1.upStep)(cValue, step, precision);
                    this.cOnChange(Math.min(addTemp, max), this.getDataSet());
                }
            }
        },
        getDataSet: function () {
            return Object.entries(this.props).reduce(function (prev, cur) {
                var key = cur[0], val = cur[1];
                if (key.startsWith('data-')) {
                    prev[key.replace('data-', '')] = val;
                }
                return prev;
            }, {});
        }
    },
});