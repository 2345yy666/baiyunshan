"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var props_1 = require("./props");
var controlled_1 = tslib_1.__importDefault(require("../mixins/controlled"));
var fmtEvent_1 = tslib_1.__importDefault(require("../_util/fmtEvent"));
Component({
    mixins: [(0, controlled_1.default)()],
    props: props_1.SearchBarDefaultProps,
    data: {
        focus: false,
    },
    methods: {
        onSubmit: function (e) {
            var onSubmit = this.props.onSubmit;
            if (onSubmit) {
                var value = e.detail.value;
                onSubmit(value, (0, fmtEvent_1.default)(this.props, e));
            }
        },
        onInput: function (e) {
            var onInput = this.props.onInput;
            if (onInput) {
                var value = e.detail.value;
                this.cOnInput(value, (0, fmtEvent_1.default)(this.props, e));
            }
        },
        onClear: function () {
            var onClear = this.props.onClear;
            if (onClear) {
                onClear('', (0, fmtEvent_1.default)(this.props));
            }
            this.clearcValue();
        },
        clearcValue: function () {
            var propsControlled = this.props.controlled;
            if (!propsControlled) {
                this.setData({
                    cValue: '',
                });
            }
        },
        onCancel: function () {
            var onCancel = this.props.onCancel;
            if (onCancel) {
                onCancel('', (0, fmtEvent_1.default)(this.props));
            }
            this.clearcValue();
        },
        onBizIconTap: function (e) {
            if (typeof this.props.onBizIconTap === 'function') {
                this.props.onBizIconTap((0, fmtEvent_1.default)(this.props, e));
            }
            else if (typeof this.props.onVoiceTap === 'function') {
                this.props.onVoiceTap((0, fmtEvent_1.default)(this.props, e));
            }
        },
        onFocus: function (e) {
            this.setData({
                focus: true,
            });
            var onFocus = this.props.onFocus;
            if (onFocus) {
                var value = e.detail.value;
                onFocus(value, (0, fmtEvent_1.default)(this.props, e));
            }
        },
        onBlur: function (e) {
            this.setData({
                focus: false,
            });
            var onBlur = this.props.onBlur;
            if (onBlur) {
                var value = e.detail.value;
                onBlur(value, (0, fmtEvent_1.default)(this.props, e));
            }
        },
    },
});