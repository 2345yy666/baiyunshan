"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var props_1 = require("./props");
var controlled_1 = tslib_1.__importDefault(require("../mixins/controlled"));
var form_1 = tslib_1.__importDefault(require("../mixins/form"));
var fmtEvent_1 = tslib_1.__importDefault(require("../_util/fmtEvent"));
var getFixedValue = function (value, multiple) {
    var fixedValue = [];
    if (value === null) {
        fixedValue = [];
    }
    else if (multiple && Array.isArray(value)) {
        fixedValue = value;
    }
    else if (!Array.isArray(value)) {
        fixedValue = [value];
    }
    return fixedValue;
};
Component({
    mixins: [(0, controlled_1.default)(), (0, form_1.default)()],
    props: props_1.SelectorDefaultProps,
    methods: {
        onChange: function (e) {
            var _a;
            var event = (0, fmtEvent_1.default)(this.props);
            var _b = e.currentTarget.dataset, disabled = _b.disabled, value = _b.value;
            var _c = this.props, multiple = _c.multiple, items = _c.items, maxSelectedCount = _c.maxSelectedCount, minSelectedCount = _c.minSelectedCount, onSelectMax = _c.onSelectMax, onSelectMin = _c.onSelectMin;
            if (!disabled && !this.props.disabled) {
                var nextValue_1;
                var fixedValue = getFixedValue(this.data.cValue, multiple);
                if ((fixedValue === null || fixedValue === void 0 ? void 0 : fixedValue.indexOf(value)) === -1) {
                    if (!isNaN(maxSelectedCount) &&
                        fixedValue.length >= maxSelectedCount) {
                        if (onSelectMax) {
                            onSelectMax(value, items.find(function (v) { return v.value === value; }), event);
                        }
                        return;
                    }
                }
                else {
                    if (!isNaN(minSelectedCount) &&
                        fixedValue.length <= minSelectedCount) {
                        if (onSelectMin) {
                            onSelectMin(value, items.find(function (v) { return v.value === value; }), event);
                        }
                        return;
                    }
                }
                if (multiple) {
                    // 之前已经选中，删除它
                    if ((fixedValue === null || fixedValue === void 0 ? void 0 : fixedValue.indexOf(value)) !== -1) {
                        nextValue_1 = fixedValue === null || fixedValue === void 0 ? void 0 : fixedValue.filter(function (item) {
                            return item !== value;
                        });
                    }
                    else {
                        // 之前未选中，增加
                        nextValue_1 = tslib_1.__spreadArray(tslib_1.__spreadArray([], fixedValue, true), [value], false);
                    }
                    // 将 value 重新按 options 排序
                    var sortValue = function (v) {
                        return items
                            .map(function (item) { return item.value; })
                            .filter(function (item) { return v.indexOf(item) !== -1; });
                    };
                    nextValue_1 = sortValue(nextValue_1);
                    var selectedItems = nextValue_1.map(function (v) { var _a; return (_a = items.filter(function (item) { return item.value === v; })) === null || _a === void 0 ? void 0 : _a[0]; });
                    this.cOnChange(nextValue_1, selectedItems, event);
                }
                else {
                    // 单选
                    // 取消选中
                    // eslint-disable-next-line no-lonely-if
                    if ((fixedValue === null || fixedValue === void 0 ? void 0 : fixedValue[0]) === value) {
                        nextValue_1 = '';
                    }
                    else {
                        // 选中
                        nextValue_1 = value;
                    }
                    var selectedItem = ((_a = items.filter(function (item) { return item.value === nextValue_1; })) === null || _a === void 0 ? void 0 : _a[0]) || null;
                    this.cOnChange(nextValue_1, selectedItem, event);
                }
            }
        },
    },
});