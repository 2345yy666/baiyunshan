"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/* eslint-disable @typescript-eslint/no-explicit-any */ var props_1 = require("./props");
var context_1 = require("../context");
var fmtEvent_1 = tslib_1.__importDefault(require("../../_util/fmtEvent"));
Component({
    props: props_1.FilterItemDefaultProps,
    data: {
        _value: [],
        show: false,
        curValue: [],
        prevValue: [],
    },
    didMount: function () {
        var _this = this;
        var key = "".concat(this.$page.$id, "-").concat(this.props.uid);
        var getValue = function () { return _this.props.value; };
        var isMult = function () { return _this.props.type === 'multiple'; };
        var setValue = function (val) { return _this.setData({
            _value: val,
        }); };
        var setShow = function (show) {
            var onOpen = _this.props.onOpen;
            _this.setData({
                show: show,
            });
            if (show && onOpen) {
                onOpen((0, fmtEvent_1.default)(_this.props));
            }
        };
        var getShow = function () { return _this.data.show; };
        var setPrevValue = function (prevValue) { return _this.setData({
            prevValue: prevValue,
        }); };
        var getCurValue = function () { return _this.data.curValue; };
        var getPlaceHolder = function () { return _this.props.placeholder || ''; };
        var getid = function () { return "".concat(_this.$id); };
        context_1.context.addItem(key, "".concat(this.$id), { isMult: isMult, getValue: getValue, setValue: setValue, getPlaceHolder: getPlaceHolder, setShow: setShow, getid: getid, getShow: getShow, setPrevValue: setPrevValue, getCurValue: getCurValue });
        context_1.context.updateItemValue(key, "".concat(this.$id));
        this.setData({
            curValue: getValue(),
        });
        if (getValue()) {
            setTimeout(function () {
                _this.setActive(true);
            });
        }
    },
    ref: function () {
        var _this = this;
        return {
            getCompInstance: function () { return _this; },
            changeSelect: function (v) { return _this.onChange(v); },
        };
    },
    methods: {
        onChange: function (v, label) {
            if (typeof this.props.onChange !== 'function')
                return;
            var event = (0, fmtEvent_1.default)(this.props);
            if (this.props.type === 'multiple') {
                this.setData({
                    curValue: v,
                    _value: v,
                });
                this.props.onChange(v, event);
                return;
            }
            var key = "".concat(this.$page.$id, "-").concat(this.props.uid);
            this.setData({
                show: false,
            });
            // 单选
            this.props.onChange(v, event);
            this.setActive(v.length > 0);
            // 箭头动画
            this.resetArrow();
            // 更改占位符
            var group = context_1.context.getGroup(key);
            if (group) {
                var placeHolderArray = group.getGroupDataVal();
                placeHolderArray[this.$id] = (label === null || label === void 0 ? void 0 : label.text) || this.props.placeholder;
                group.setGroupDataVal({ key: 'placeHolderArray', val: placeHolderArray });
            }
        },
        confirmSelector: function () {
            var event = (0, fmtEvent_1.default)(this.props);
            // 多选
            if (typeof this.props.onChange !== 'function')
                return;
            this.setData({
                prevValue: this.data.curValue,
                show: false,
            });
            this.props.onChange(this.data.curValue, event);
            this.setActive(this.data.curValue.length > 0);
            // 箭头动画
            this.resetArrow();
        },
        resetArrow: function () {
            var key = "".concat(this.$page.$id, "-").concat(this.props.uid);
            var group = context_1.context.getGroup(key);
            if (group) {
                group.setGroupDataVal({ key: 'currentFilterItemId', val: '' });
            }
        },
        resetSelector: function () {
            this.setData({
                _value: this.data.prevValue,
            });
        },
        setActive: function (active) {
            var _a;
            var key = "".concat(this.$page.$id, "-").concat(this.props.uid);
            var group = context_1.context.getGroup(key);
            if (group) {
                var val = (_a = {}, _a[this.$id] = active, _a);
                group.setGroupDataVal({ key: 'activeArray', val: val });
            }
        },
    },
});