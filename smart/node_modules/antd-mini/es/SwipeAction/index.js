"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var props_1 = require("./props");
var context_1 = require("../_util/context");
var swipeIdContext = new context_1.ComponentContext();
Component({
    props: props_1.SwipeActionDefaultProps,
    data: {
        itemPosition: 0,
        leftBtn: false,
        rightBtn: false,
        prevId: null,
    },
    didMount: function () {
        var _this = this;
        this.setBtnWidth();
        this.swipeActionItemId = function (value) {
            if (value !== _this.$id && _this.data.itemPosition !== 0) {
                _this.setData({
                    itemPosition: 0,
                });
            }
        };
        swipeIdContext.onUpdate(this.swipeActionItemId);
        this.props.onGetRef(this.getRef());
    },
    didUnmount: function () {
        swipeIdContext.offUpdate(this.swipeActionItemId);
    },
    methods: {
        setBtnWidth: function () {
            var _this = this;
            my.createSelectorQuery()
                .select(".amd-swipe-action-right-".concat(this.$id))
                .boundingClientRect()
                .exec(function (ret) {
                _this.rightBtnWidth = (ret && ret[0] && ret[0].width) || 0;
            });
            my.createSelectorQuery()
                .select(".amd-swipe-action-left-".concat(this.$id))
                .boundingClientRect()
                .exec(function (ret) {
                _this.leftBtnWidth = (ret && ret[0] && ret[0].width) || 0;
            });
        },
        onSwipeTap: function () {
            if (this.data.itemPosition !== 0) {
                this.setData({
                    itemPosition: 0,
                });
            }
        },
        onSwipeStart: function (e) {
            swipeIdContext.update(this.$id);
            var disabled = this.props.disabled;
            if (this.data.itemPosition !== 0 || disabled) {
                this.setData({
                    itemPosition: 0,
                });
                this.touchObject = {
                    startX: 0,
                    startY: 0,
                };
            }
            else {
                this.touchObject = {
                    startX: e.touches[0].pageX,
                    startY: e.touches[0].pageY,
                };
            }
        },
        onSwipeMove: function (e) {
            var touchObject = this.touchObject;
            var touchePoint = e.touches[0];
            var itemPosition = this.data.itemPosition;
            if (touchObject) {
                touchObject.endX = touchePoint.pageX;
                // 首次触发时，计算滑动角度
                if (touchObject.direction === undefined) {
                    var direction = 0;
                    var xDist = touchObject.startX - touchePoint.pageX || 0;
                    var yDist = touchObject.startY - touchePoint.pageY || 0;
                    var r = Math.atan2(yDist, xDist);
                    var swipeAngle = Math.round((r * 180) / Math.PI);
                    if (swipeAngle < 0) {
                        swipeAngle = 360 - Math.abs(swipeAngle);
                    }
                    if (swipeAngle <= 30 && swipeAngle >= 0) {
                        direction = 1;
                    }
                    if (swipeAngle <= 360 && swipeAngle >= 330) {
                        direction = 1;
                    }
                    if (swipeAngle >= 170 && swipeAngle <= 190) {
                        direction = -1;
                    }
                    touchObject.direction = direction;
                }
                // 通过角度判断是左右方向
                if (touchObject.direction !== 0) {
                    var newPoisiton = itemPosition;
                    // 滑动距离
                    var distance = touchObject.endX - touchObject.startX;
                    // 左划
                    if (distance < 0) {
                        newPoisiton = Math.max(distance, -this.rightBtnWidth);
                        this.setData({
                            rightBtn: true,
                            leftBtn: false,
                        });
                        // 右划
                    }
                    else {
                        newPoisiton = Math.min(distance, this.leftBtnWidth);
                        this.setData({
                            rightBtn: false,
                            leftBtn: true,
                        });
                    }
                    if (Math.abs(distance) > 10) {
                        this.setData({
                            itemPosition: newPoisiton,
                        });
                    }
                }
            }
        },
        onSwipeEnd: function (e) {
            var touchObject = this.touchObject;
            if (touchObject.direction !== 0) {
                var touchePoint = e.changedTouches[0];
                touchObject.endX = touchePoint.pageX;
                var itemPosition = this.data.itemPosition;
                var distance = touchObject.endX - touchObject.startX;
                var newPoisiton = itemPosition;
                if (distance < 0) {
                    if (Math.abs(distance + itemPosition) > this.rightBtnWidth * 0.7) {
                        newPoisiton = (-this.rightBtnWidth);
                    }
                    else {
                        newPoisiton = 0;
                    }
                }
                else if (Math.abs(distance + itemPosition) > this.leftBtnWidth * 0.7) {
                    newPoisiton = this.leftBtnWidth;
                }
                else {
                    newPoisiton = 0;
                }
                this.setData({
                    itemPosition: newPoisiton,
                });
            }
        },
        onLeftButtonTap: function (e) {
            var _a = e.currentTarget.dataset, index = _a.index, text = _a.text, type = _a.type;
            var _b = this.props, autoClose = _b.autoClose, onLeftButtonTap = _b.onLeftButtonTap, extraInfo = _b.extraInfo;
            if (autoClose) {
                this.setData({
                    itemPosition: 0,
                });
            }
            if (onLeftButtonTap) {
                return onLeftButtonTap(index, text, type, extraInfo, this.getDataSet());
            }
        },
        onRightButtonTap: function (e) {
            var _a = e.currentTarget.dataset, index = _a.index, text = _a.text, type = _a.type;
            var _b = this.props, autoClose = _b.autoClose, onRightButtonTap = _b.onRightButtonTap, extraInfo = _b.extraInfo;
            if (autoClose) {
                this.setData({
                    itemPosition: 0,
                });
            }
            if (onRightButtonTap) {
                return onRightButtonTap(index, text, type, extraInfo, this.getDataSet());
            }
        },
        getRef: function () {
            var _this = this;
            return {
                getCompInstance: function () { return _this; },
                setItemPosition: function (idx) {
                    _this.setData({
                        itemPosition: idx,
                    });
                }
            };
        },
        getDataSet: function () {
            return Object.entries(this.props).reduce(function (prev, cur) {
                var key = cur[0], val = cur[1];
                if (key.startsWith('data-')) {
                    prev[key.replace('data-', '')] = val;
                }
                return prev;
            }, {});
        }
    },
    ref: function () {
        var _this = this;
        return {
            getCompInstance: function () { return _this; },
            setItemPosition: function (idx) {
                _this.setData({
                    itemPosition: idx,
                });
            }
        };
    },
});