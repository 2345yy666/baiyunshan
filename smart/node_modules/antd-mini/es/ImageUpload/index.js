"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var fast_deep_equal_1 = tslib_1.__importDefault(require("fast-deep-equal"));
var props_1 = require("./props");
var promisify_1 = require("../_util/promisify");
Component({
    props: props_1.UploaderDefaultProps,
    data: {
        fileList: [],
    },
    didMount: function () {
        this.handleValue();
    },
    didUpdate: function (prevProps) {
        if (!(0, fast_deep_equal_1.default)(prevProps.value, this.props.value)) {
            this.handleValue();
        }
    },
    methods: {
        handleValue: function () {
            var curValue;
            var value = this.props.value;
            if (typeof value === 'string') {
                curValue = [].concat({
                    url: value,
                    status: 'done'
                });
            }
            else if (Array.isArray(value) &&
                value.length &&
                value.some(function (v) { return typeof v === 'string'; })) {
                curValue = value.map(function (v) { return (typeof v === 'string' ? {
                    url: v,
                    status: 'done'
                } : v); });
            }
            else {
                curValue = value;
            }
            this.setData({
                fileList: curValue
            });
        },
        onChooseImage: function () {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var fileList, _a, maxCount, sourceType, chooseImageRes, tempFiles, tempFilePaths, tasks;
                var _this = this;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            fileList = this.data.fileList;
                            _a = this.props, maxCount = _a.maxCount, sourceType = _a.sourceType;
                            return [4 /*yield*/, (0, promisify_1.chooseImage)({
                                    count: maxCount - fileList.length,
                                    sourceType: sourceType
                                })];
                        case 1:
                            chooseImageRes = _b.sent();
                            if (!(chooseImageRes && chooseImageRes.success)) return [3 /*break*/, 3];
                            tempFiles = chooseImageRes.tempFiles, tempFilePaths = chooseImageRes.tempFilePaths;
                            tasks = (tempFiles || tempFilePaths).map(function (file) {
                                return _this.uploadFile(typeof file === 'string' ?
                                    {
                                        path: file
                                    } :
                                    file);
                            });
                            return [4 /*yield*/, Promise.all(tasks)];
                        case 2:
                            _b.sent();
                            _b.label = 3;
                        case 3: return [2 /*return*/];
                    }
                });
            });
        },
        uploadFile: function (file) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var _a, action, fileName, formData, onBeforeUpload, onUpload, onAfterUpload, path, beforeUploadRes, tempFileList, res, response, resUrl, onUploadRes, e_1;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this.props, action = _a.action, fileName = _a.fileName, formData = _a.formData, onBeforeUpload = _a.onBeforeUpload, onUpload = _a.onUpload, onAfterUpload = _a.onAfterUpload;
                            path = file.path;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 13, , 14]);
                            if (!onBeforeUpload) return [3 /*break*/, 3];
                            return [4 /*yield*/, onBeforeUpload.call(this.props, file, this.data.fileList)];
                        case 2:
                            beforeUploadRes = _b.sent();
                            if (beforeUploadRes === false)
                                return [2 /*return*/];
                            _b.label = 3;
                        case 3:
                            tempFileList = this.data.fileList.concat([{
                                    /** 这里以图片的本地地址作为key */
                                    key: path,
                                    url: '',
                                    localPath: path,
                                    status: 'pending'
                                }]);
                            this.setData({
                                fileList: tempFileList
                            });
                            if (!(action && !onUpload)) return [3 /*break*/, 10];
                            return [4 /*yield*/, (0, promisify_1.uploadFile)({
                                    url: action,
                                    fileType: 'image',
                                    fileName: fileName,
                                    filePath: path,
                                    formData: formData || {},
                                    hideLoading: true,
                                })];
                        case 4:
                            res = _b.sent();
                            if (!(res.statusCode === 200 || res.statusCode === '200')) return [3 /*break*/, 8];
                            response = JSON.parse(res.data);
                            if (!onAfterUpload) return [3 /*break*/, 6];
                            return [4 /*yield*/, onAfterUpload.call(this.props, response)];
                        case 5:
                            resUrl = _b.sent();
                            if (resUrl) {
                                this.updateFileList(path, 'done', resUrl);
                            }
                            else {
                                this.updateFileList(path, 'error');
                            }
                            return [3 /*break*/, 7];
                        case 6:
                            if (response.success && response.data && response.data.url) {
                                this.updateFileList(path, 'done', response.data.url);
                            }
                            else {
                                this.updateFileList(path, 'error');
                                my.showToast({
                                    content: '接口返回格式非默认格式，请使用onAfterUpload进行处理'
                                });
                            }
                            _b.label = 7;
                        case 7: return [3 /*break*/, 9];
                        case 8:
                            this.updateFileList(path, 'error');
                            my.showToast({
                                content: '上传失败，请重试'
                            });
                            _b.label = 9;
                        case 9: return [2 /*return*/];
                        case 10:
                            if (!onUpload) return [3 /*break*/, 12];
                            return [4 /*yield*/, onUpload.call(this.props, {
                                    key: path,
                                    url: '',
                                    localPath: path,
                                    status: 'pending'
                                })];
                        case 11:
                            onUploadRes = _b.sent();
                            this.updateFileList(path, onUploadRes.status, onUploadRes.url);
                            _b.label = 12;
                        case 12: return [3 /*break*/, 14];
                        case 13:
                            e_1 = _b.sent();
                            this.updateFileList(path, 'error');
                            my.showToast({
                                content: e_1.errorMessage || '上传失败，请重试',
                                type: 'fail',
                            });
                            return [3 /*break*/, 14];
                        case 14: return [2 /*return*/];
                    }
                });
            });
        },
        updateFileList: function (path, status, url) {
            var fileList = this.data.fileList;
            var onChange = this.props.onChange;
            var tempFileList = fileList.map(function (file) {
                if (file.key === path) {
                    return tslib_1.__assign(tslib_1.__assign({}, file), { url: url ? url : '', status: status });
                }
                return file;
            });
            this.setData({
                fileList: tempFileList
            });
            onChange && onChange.call(this.props, tempFileList);
        },
        onDeleteImage: function (e) {
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var fileList, _a, onDelete, onChange, deleteImageIndex, deleteFile, tempFileList, onDeleteRes;
                return tslib_1.__generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            fileList = this.data.fileList;
                            _a = this.props, onDelete = _a.onDelete, onChange = _a.onChange;
                            deleteImageIndex = e.target.dataset.deleteImageIndex;
                            deleteFile = fileList.find(function (item, index) { return index === deleteImageIndex; });
                            tempFileList = fileList.filter(function (item, index) { return index !== deleteImageIndex; });
                            if (!onDelete) return [3 /*break*/, 2];
                            return [4 /*yield*/, onDelete.call(this.props, deleteFile)];
                        case 1:
                            onDeleteRes = _b.sent();
                            if (onDeleteRes === false)
                                return [2 /*return*/];
                            _b.label = 2;
                        case 2:
                            this.setData({
                                fileList: tempFileList
                            });
                            onChange && onChange.call(this.props, tempFileList);
                            return [2 /*return*/];
                    }
                });
            });
        },
        onPreviewImage: function (e) {
            var fileList = this.data.fileList;
            var _a = this.props, preview = _a.preview, enableShowPhotoDownload = _a.enableShowPhotoDownload, enableSavePhoto = _a.enableSavePhoto, onPreview = _a.onPreview;
            var previewImageIndex = e.target.dataset.previewImageIndex;
            if (!preview)
                return;
            if (onPreview) {
                onPreview.call(this.props, fileList);
                return;
            }
            (0, promisify_1.previewImage)({
                current: previewImageIndex,
                urls: fileList.map(function (file) { return file.localPath || file.url; }),
                enableShowPhotoDownload: enableShowPhotoDownload,
                enablesavephoto: enableSavePhoto
            });
        },
    }
});